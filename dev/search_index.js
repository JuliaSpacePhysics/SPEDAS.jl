var documenterSearchIndex = {"docs":
[{"location":"examples/interactive/#Basic-interactive-tplot","page":"Basic interactive tplot","title":"Basic interactive tplot","text":"","category":"section"},{"location":"examples/interactive/#Function-as-tplot-argument","page":"Basic interactive tplot","title":"Function as tplot argument","text":"","category":"section"},{"location":"examples/interactive/","page":"Basic interactive tplot","title":"Basic interactive tplot","text":"using Dates\nusing DimensionalData\nusing SpacePhysicsMakie\nusing CairoMakie\n\nt0 = DateTime(2001, 1, 1)\nt1 = DateTime(2001, 1, 2)\n\nfunction func(t0, t1)\n    x = t0:Hour(1):t1\n    y = @. sin(2pi * ((x - t0) / Day(1)))\n    DimArray(y, Ti(x))\nend\n\nf, axes = tplot(func, t0, t1)","category":"page"},{"location":"examples/interactive/#Interactive-tplot","page":"Basic interactive tplot","title":"Interactive tplot","text":"","category":"section"},{"location":"examples/interactive/","page":"Basic interactive tplot","title":"Basic interactive tplot","text":"Here we simulate a user interacting with the plot by progressively zooming out in time with tlims!.","category":"page"},{"location":"examples/interactive/","page":"Basic interactive tplot","title":"Basic interactive tplot","text":"dt = Day(1)\nrecord(f, \"interactive.mp4\", 1:5; framerate=2) do n\n    tlims!(t0, t1 + n * dt)\n    sleep(0.5)\nend;","category":"page"},{"location":"examples/interactive/","page":"Basic interactive tplot","title":"Basic interactive tplot","text":"<video autoplay loop muted playsinline controls src=\"../interactive.mp4\" />","category":"page"},{"location":"explanations/multispacecraft/#Multi-spacecraft-analysis-methods","page":"Multi-spacecraft analysis methods","title":"Multi-spacecraft analysis methods","text":"","category":"section"},{"location":"explanations/multispacecraft/#Reciprocal-vectors","page":"Multi-spacecraft analysis methods","title":"Reciprocal vectors","text":"","category":"section"},{"location":"explanations/multispacecraft/","page":"Multi-spacecraft analysis methods","title":"Multi-spacecraft analysis methods","text":"Paschmann and Daly [2], Chapter 4, Paschmann and Daly [3], Chapter 14, ","category":"page"},{"location":"explanations/multispacecraft/#SPEDAS.position_tensor","page":"Multi-spacecraft analysis methods","title":"SPEDAS.position_tensor","text":"𝐑 = _α (𝐫_α-𝐫_b) (𝐫_α-𝐫_b) = _α 𝐫_α 𝐫_α-𝐫_b 𝐫_b\n\nwith 𝐫_b = _α 𝐫_α  N and N is the number of positions.\n\nReferences\n\nPaschmann and Daly [2] Paschmann & Daly, 2008. Section 4.7\n\n\n\n\n\n","category":"function"},{"location":"explanations/multispacecraft/#SPEDAS.reciprocal_vector","page":"Multi-spacecraft analysis methods","title":"SPEDAS.reciprocal_vector","text":"reciprocal_vector(r_βα, r_βγ, r_βλ)\n\nCompute the reciprocal vector 𝒌_α for a vertex of a tetrahedron given the relative position vectors.\n\n𝒌_α = frac𝐫_βγ  𝐫_βλ𝐫_βα  (𝐫_βγ  𝐫_βλ)\n\nwhere 𝐫_αβ = r_β - r_α are relative position vectors.\n\nReferences\n\nMulti-spacecraft analysis methods revisited : 4.3 Properties of reciprocal vectors\n\n\n\n\n\nreciprocal_vector(rα, rβ, rγ, rλ)\n\nCompute the reciprocal vector 𝒌_α for a vertex of a tetrahedron given the position vectors of all vertices.\n\nThe vertices (α, β, γ, λ) must form a cyclic permutation of (1, 2, 3, 4).\n\n\n\n\n\nreciprocal_vector(rα, r0s::AbstractVector{<:AbstractVector})\n\nGeneralised reciprocal vector for N != 4\n\n𝐪_α = 𝐑^-1 𝐫_α\n\nSee also: reciprocal_vector, position_tensor\n\n\n\n\n\n","category":"function"},{"location":"explanations/multispacecraft/#SPEDAS.reciprocal_vectors","page":"Multi-spacecraft analysis methods","title":"SPEDAS.reciprocal_vectors","text":"Compute the set of reciprocal vectors {𝒌_α}, which is also called the reciprocal base of the tetrahedron.\n\nSee also: reciprocal_vector\n\n\n\n\n\n","category":"function"},{"location":"explanations/multispacecraft/#Estimation-of-spatial-gradients","page":"Multi-spacecraft analysis methods","title":"Estimation of spatial gradients","text":"","category":"section"},{"location":"explanations/multispacecraft/#SPEDAS.lingradest","page":"Multi-spacecraft analysis methods","title":"SPEDAS.lingradest","text":"lingradest(B1, B2, B3, B4, R1, R2, R3, R4)\n\nCompute spatial derivatives such as grad, div, curl and curvature using reciprocal vector technique (linear interpolation).\n\nArguments\n\nB1, B2, B3, B4: 3-element vectors giving magnetic field measurements at each probe\nR1, R2, R3, R4: 3-element vectors giving the probe positions\n\nReturns\n\nA named tuple containing:   • Rbary: Barycenter position   • Bbc: Magnetic field at the barycenter   • Bmag: Magnetic field magnitude at the barycenter   • LGBx, LGBy, LGBz: Linear gradient estimators for each component   • LD: Linear divergence estimator   • LCB: Linear curl estimator   • curvature: Field‐line curvature vector   • R_c: Field‐line curvature radius\n\nReferences\n\nBased on the method of Chanteur (ISSI, 1998, Ch. 11).\n\nlingradest.pro\nlingradest.py\n\n\n\n\n\nlingradest(B1::MatrixLike, args...)\n\nVectorized method for simplified usage. Returns a StructArray containing the results.\n\n\n\n\n\nlingradest(B1::AbstractDimArray, args...)\n\nMethod for handling dimensional arrays. Takes AbstractDimArray inputs with a time dimension and returns a DimStack containing all computed quantities.\n\n\n\n\n\nlingradest(\n    Bx1, Bx2, Bx3, Bx4,\n    By1, By2, By3, By4,\n    Bz1, Bz2, Bz3, Bz4,\n    R1, R2, R3, R4\n)\n\nSPEDAS-argument-compatible version of lingradest.\n\n\n\n\n\n","category":"function"},{"location":"explanations/multispacecraft/","page":"Multi-spacecraft analysis methods","title":"Multi-spacecraft analysis methods","text":"Since tildeg and tildeboldsymbolV are linear functions, the calculation of spatial derivatives, such as the gradient of some scalar function or the divergence or curl of a vector function, can be done quite easily. The results are:","category":"page"},{"location":"explanations/multispacecraft/","page":"Multi-spacecraft analysis methods","title":"Multi-spacecraft analysis methods","text":"beginaligned\nnabla g simeq nabla tildeg  =sum_alpha=0^3 boldsymbolk_alpha g_alpha \nhatboldsymbole cdot nabla g simeq hatboldsymbole cdot nabla tildeg  =sum_alpha=0^3left(hatboldsymbole cdot boldsymbolk_alpharight) g_alpha \nnabla cdot boldsymbolV simeq nabla cdot tildeboldsymbolV  =sum_alpha=0^3 boldsymbolk_alpha cdot boldsymbolV_alpha \nnabla times boldsymbolV simeq nabla times tildeboldsymbolV  =sum_alpha=0^3 boldsymbolk_alpha times boldsymbolV_alpha\nendaligned","category":"page"},{"location":"explanations/multispacecraft/#Multi-spacecraft-timing","page":"Multi-spacecraft analysis methods","title":"Multi-spacecraft timing","text":"","category":"section"},{"location":"explanations/multispacecraft/#SPEDAS.ConstantVelocityApproach","page":"Multi-spacecraft analysis methods","title":"SPEDAS.ConstantVelocityApproach","text":"CVA(positions, times)\n\nConstant Velocity Approach (CVA) for determining boundary normal and velocity. Solve timing equation: D * m = Δts\n\nParameters:\n\npositions: Positions of 4 spacecraft (4×3 array)\ntimes: Times of boundary crossing for each spacecraft\n\n\n\n\n\nConstantVelocityApproach(positions, times, durations)\n\nGiven durations of the boundary crossings, calculate the thickness of the boundary\n\n\n\n\n\n","category":"function"},{"location":"explanations/multispacecraft/","page":"Multi-spacecraft analysis methods","title":"Multi-spacecraft analysis methods","text":"M. Hapgood. Space Physics Coordinate Transformations: A User Guide. Planetary and Space Science 40, 711–717 (1992).\n\n\n\nG. Paschmann and P. W. Daly. Multi-Spacecraft Analysis Methods Revisited (ESA Communications, 2008).\n\n\n\nG. Paschmann and P. W. Daly. Analysis Methods for Multi-Spacecraft Data (ESA Publications Division, 2000).\n\n\n\nJ. C. Samson and J. V. Olson. Some Comments on the Descriptions of the Polarization States of Waves. Geophysical Journal International 61, 115–129 (1980).\n\n\n\nJ. D. Means. Use of the Three-Dimensional Covariance Matrix in Analyzing the Polarization Properties of Plane Waves. Journal of Geophysical Research (1896-1977) 77, 5551–5559 (1972).\n\n\n\n","category":"page"},{"location":"explanations/waves/#Wave","page":"Wave","title":"Wave","text":"","category":"section"},{"location":"explanations/waves/#Polarization-states-of-waves","page":"Wave","title":"Polarization states of waves","text":"","category":"section"},{"location":"explanations/waves/","page":"Wave","title":"Wave","text":"This module provides functions for calculating the polarization states of waves: polarization, ellipticity, helicity.","category":"page"},{"location":"explanations/waves/#SPEDAS.polarization","page":"Wave","title":"SPEDAS.polarization","text":"polarization(S0, S1, S2, S3)\npolarization(S::StokesVector)\n\nCompute the degree of polarization (p) from Stoke parameters or a Stokes vector.\n\nReference\n\nWikipedia\nStokes parameters\n\n\n\n\n\npolarization(S)\n\nCompute the degree of polarization (DOP) p^2 from spectral matrix S.\n\nbeginaligned\np^2  = 1-frac(tr 𝐒)^2-(tr 𝐒^2)(tr 𝐒)^2-n^-1(tr 𝐒)^2 \n    = fracn(tr 𝐒^2)-(tr 𝐒)^2(n-1)(tr 𝐒)^2\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"explanations/waves/#SPEDAS.wpol_helicity","page":"Wave","title":"SPEDAS.wpol_helicity","text":"wpol_helicity(S, waveangle)\n\nCompute helicity and ellipticity for a single frequency.\n\nArguments\n\nS: Spectral matrix for a single frequency, size (3,3)\nwaveangle: Wave normal angle for this frequency\n\nReturns\n\nhelicity: Average helicity across the three components\nellipticity: Average ellipticity across the three components\n\n\n\n\n\n","category":"function"},{"location":"explanations/waves/","page":"Wave","title":"Wave","text":"Samson and Olson [4] Means [5]","category":"page"},{"location":"explanations/waves/#SPEDAS.spectral_matrix","page":"Wave","title":"SPEDAS.spectral_matrix","text":"spectral_matrix(Xf)\n\nCompute the spectral matrix S defined by\n\nS_ij(f) = X_i(f) X_j^*(f)\n\nwhere X_i(f)=Xf[f, i] is the FFT of the i-th component and * denotes complex conjugation.\n\n\n\n\n\nspectral_matrix(X, window)\n\nCompute the spectral matrix S(f) given the time series data X.\n\nReturns a 3-D array of size N_freq n n, where N_freq = lfloor N2 rfloor      and n is the dimensionality (number of components).\n\nArguments\n\nX: Matrix where each column is a component of the multivariate time series, or a vector of vectors.\nwindow: A window function (optional). If not provided, a rectangular window (no windowing) is used.\n\n\n\n\n\n","category":"function"},{"location":"explanations/waves/#SPEDAS.twavpol","page":"Wave","title":"SPEDAS.twavpol","text":"twavpol(x)\n\nA convenience wrapper around wavpol that works with DimensionalData arrays.\n\nIt automatically extracts the time dimension and returns the results as a DimStack with properly labeled dimensions.\n\n\n\n\n\n","category":"function"},{"location":"explanations/waves/#SPEDAS.wavpol","page":"Wave","title":"SPEDAS.wavpol","text":"wavpol(X, fs=1; nfft=256, noverlap=div(nfft, 2), smooth_t=_smooth_t(nfft), smooth_f=hamming(3), nbuffers=Threads.nthreads())\n\nPerform polarization analysis of n-component time series data.\n\nFor each FFT window (with specified overlap), the routine:\n\nApplies a time-domain window function and computes the FFT to construct the spectral matrix S(f)\nApplies frequency smoothing using a window function\nComputes wave parameters: power, degree of polarization, wave normal angle, ellipticity, and helicity\n\nThe analysis assumes the data are in a right-handed, field-aligned coordinate system  (with Z along the ambient magnetic field).\n\nArguments\n\nX: Matrix where each column is a component of the multivariate time series\nfs: Sampling frequency (default: 1)\n\nKeywords\n\nnfft: Number of points for FFT (default: 256)\nnoverlap: Number of overlapping points between windows (default: nfft÷2)\nsmooth_t: Time domain window function (default: Hann window)\nsmooth_f: Frequency domain smoothing window (default: 3-point Hamming window)\nnbuffers: Number of pre-allocated buffers for parallel processing (default: number of threads)\n\nReturns\n\nA named tuple containing:\n\nindices: Time indices for each FFT window\nfreqs: Frequency array\npower: Power spectral density, normalized by frequency bin width and window function\ndegpol: Degree of polarization [0,1]\nwaveangle: Wave normal angle [0,π/2]\nellipticity: Wave ellipticity [-1,1], negative for left-hand polarized\nhelicity: Wave helicity\n\nSee also: polarization, wave_normal_angle, wpol_helicity\n\n\n\n\n\n","category":"function"},{"location":"explanations/waves/","page":"Wave","title":"Wave","text":"For validation against PySPEDAS, see Wave polarization section in Validation with PySPEDAS.","category":"page"},{"location":"observatory/themis/#Time-History-of-Events-and-Macroscale-Interactions-during-Substorms-(THEMIS)","page":"Time History of Events and Macroscale Interactions during Substorms (THEMIS)","title":"Time History of Events and Macroscale Interactions during Substorms (THEMIS)","text":"","category":"section"},{"location":"observatory/themis/#SPEDAS.THEMIS","page":"Time History of Events and Macroscale Interactions during Substorms (THEMIS)","title":"SPEDAS.THEMIS","text":"Sub-module for \"Time History of Events and Macroscale Interactions during Substorms (THEMIS)\"\n\nTo load project, project-specific instrument and dataset variables into scope:\n\nusing SPEDAS.THEMIS\n\nConfiguration File: THEMIS.toml\n\n\n\n\n\n","category":"module"},{"location":"observatory/themis/#SPEDAS.THEMIS.themis","page":"Time History of Events and Macroscale Interactions during Substorms (THEMIS)","title":"SPEDAS.THEMIS.themis","text":"Project: Time History of Events and Macroscale Interactions during Substorms\n  Metadata (Dict): \n    abbreviation: THEMIS\n    links: [\"https://en.wikipedia.org/wiki/THEMIS\"]\n    spase_id: spase://SMWG/Observatory/THEMIS\n\n\n\n\n\n","category":"constant"},{"location":"observatory/themis/#Instruments","page":"Time History of Events and Macroscale Interactions during Substorms (THEMIS)","title":"Instruments","text":"","category":"section"},{"location":"observatory/themis/#Datasets","page":"Time History of Events and Macroscale Interactions during Substorms (THEMIS)","title":"Datasets","text":"","category":"section"},{"location":"observatory/juno/#Juno","page":"Juno","title":"Juno","text":"","category":"section"},{"location":"observatory/juno/#SPEDAS.Juno","page":"Juno","title":"SPEDAS.Juno","text":"Sub-module for \"Juno (Juno)\"\n\nTo load project, project-specific instrument and dataset variables into scope:\n\nusing SPEDAS.Juno\n\nConfiguration File: Juno.toml\n\n\n\n\n\n","category":"module"},{"location":"observatory/juno/#SPEDAS.Juno.juno","page":"Juno","title":"SPEDAS.Juno.juno","text":"Project: Juno\n  Instruments (Dict): \n    jade: Jovian Auroral Distributions Experiment\n  Datasets (Dict): \n    juno-jadel5-protmom: Juno - JADE - L5 : ions - protons moments\n  Metadata (Dict): \n    links: [\"[HPDE.io](https://hpde.io/CNES/Observatory/CDPP-AMDA/Juno)\", \"[Wikipedia](https://en.wikipedia.org/wiki/Juno_(spacecraft))\"]\n    spase_id: spase://CNES/Observatory/Juno\n\n\n\n\n\n","category":"constant"},{"location":"observatory/juno/#Instruments","page":"Juno","title":"Instruments","text":"","category":"section"},{"location":"observatory/juno/#SPEDAS.Juno.jade","page":"Juno","title":"SPEDAS.Juno.jade","text":"Instrument: Jovian Auroral Distributions Experiment\n  Metadata (Dict): \n    links: [\"[HPDE.io](https://hpde.io/CNES/Instrument/CDPP-AMDA/Juno/JADE)\", \"[PDS](https://pds-ppi.igpp.ucla.edu/mission/juno/Jovian_Auroral_Distributions_Experiment)\", \"[Wikipedia](https://en.wikipedia.org/wiki/Jovian_Auroral_Distributions_Experiment)\", \"[NumericalData - HPDE.io](https://hpde.io/CNES/NumericalData/CDPP-AMDA/Juno/JADE)\"]\n    spase_id: spase://CNES/Instrument/CDPP-AMDA/Juno/JADE\n    datasets: [\"juno-jadel5-protmom\"]\n\n\n\n\n\n","category":"constant"},{"location":"observatory/juno/#Datasets","page":"Juno","title":"Datasets","text":"","category":"section"},{"location":"observatory/juno/#SPEDAS.Juno.juno-jadel5-protmom","page":"Juno","title":"SPEDAS.Juno.juno-jadel5-protmom","text":"LDataSet: Juno - JADE - L5 : ions - protons moments\n  Data (NoMetadata): \n    SpaceDataModel.NoMetadata()\n  Metadata (Dict): \n    links: [\"[HPDE.io](https://hpde.io/CNES/NumericalData/CDPP-AMDA/Juno/JADE/juno-jadel5-protmom)\", \"[PDS](https://pds-ppi.igpp.ucla.edu/data/JNO-J-JAD-5-MOMENTS-V1.0/DOCUMENT/JADE_FSW4_SIS_V04.PDF)\", \"[AMDA HAPI](https://amda.irap.omp.eu/service/hapi/info?id=juno-jadel5-protmom)\"]\n    sampling: 30s — 10m\n    time_range: 2016/06/24 08:17:26 — 2020/04/10 05:29:55\n\n\n\n\n\n","category":"constant"},{"location":"tutorials/mag_model/#Radiation-Belt-Modeling","page":"Radiation Belt Modeling","title":"Radiation Belt Modeling","text":"","category":"section"},{"location":"tutorials/mag_model/","page":"Radiation Belt Modeling","title":"Radiation Belt Modeling","text":"International Radiation Belt Environment Modeling (IRBEM)","category":"page"},{"location":"tutorials/mag_model/","page":"Radiation Belt Modeling","title":"Radiation Belt Modeling","text":"using CairoMakie\nusing IRBEM\n\n# Draw sphere\nfunction draw_sphere!(ax)\n    u = range(0, 2π, length=40)\n    v = range(0, π, length=20)\n    xs = cos.(u') .* sin.(v)\n    ys = sin.(u') .* sin.(v)\n    zs = ones(40)' .* cos.(v) \n    wireframe!(ax, xs, ys, zs, color=:black)\nend","category":"page"},{"location":"tutorials/mag_model/#Trace-field-line","page":"Radiation Belt Modeling","title":"Trace field line","text":"","category":"section"},{"location":"tutorials/mag_model/","page":"Radiation Belt Modeling","title":"Radiation Belt Modeling","text":"# Set up model and input\nmodel = MagneticField(options=[0,0,0,0,0])\nLLA = Dict(\n    \"x1\" => 651, \"x2\" => 63, \"x3\" => 15.9,\n    \"dateTime\" => \"2015-02-02T06:12:43\"\n)\nmaginput = Dict(\"Kp\" => 40.0)\nout = trace_field_line(model, LLA, maginput)\n\n# Plot field line\nfig = Figure()\naxis = (xlabel=\"x GEO\", ylabel=\"y GEO\", zlabel=\"z GEO\")\nax = Axis3(fig[1, 1]; axis..., limits=((-5, 5), (-5, 5), (-5, 5)))\npositions = Point3f.(eachcol(out.posit)[1:8:end])\nscatter!(ax, positions)\ndraw_sphere!(ax)\nfig","category":"page"},{"location":"tutorials/mag_model/#Azimuthal-field-line-visualization","page":"Radiation Belt Modeling","title":"Azimuthal field line visualization","text":"","category":"section"},{"location":"tutorials/mag_model/","page":"Radiation Belt Modeling","title":"Radiation Belt Modeling","text":"model = MagneticField(options = [0,0,0,0,0])\nmaginput = Dict(\"Kp\"=>0.0)\nposits = mapreduce(hcat, 0:20:360) do x3\n    X = Dict(\"x1\"=>651, \"x2\"=>55, \"x3\"=>x3, \"dateTime\"=>\"2015-02-02T06:12:43\")\n    output = trace_field_line(model, X, maginput)\n    output.posit\nend\n\nfig = Figure()\nax = Axis3(fig[1, 1])\nscatter!(Point3f.(eachcol(posits)[1:3:end]))\ndraw_sphere!(ax)\nfig","category":"page"},{"location":"tutorials/mag_model/#Drift-shell","page":"Radiation Belt Modeling","title":"Drift shell","text":"","category":"section"},{"location":"tutorials/mag_model/","page":"Radiation Belt Modeling","title":"Radiation Belt Modeling","text":"model = MagneticField(options = [0,0,0,0,0])\nX = Dict(\"x1\"=>651, \"x2\"=>63, \"x3\"=>20, \"dateTime\"=>\"2015-02-02T06:12:43\")\nmaginput = Dict(\"Kp\"=>40)\noutput = drift_shell(model, X, maginput)\nposits = Point3f.(vec(eachslice(output.posit;dims=(2,3))))\n\nfig = Figure()\nax = Axis3(fig[1, 1])\nscatter!(ax, posits)\ndraw_sphere!(ax)\nfig","category":"page"},{"location":"examples/speasy/#Complex-requests-and-flexible-layout","page":"Complex requests and flexible layout","title":"Complex requests and flexible layout","text":"","category":"section"},{"location":"examples/speasy/","page":"Complex requests and flexible layout","title":"Complex requests and flexible layout","text":"Visualize multiple time series in a customized layout.","category":"page"},{"location":"examples/speasy/#Get-data-with-Speasy","page":"Complex requests and flexible layout","title":"Get data with Speasy","text":"","category":"section"},{"location":"examples/speasy/","page":"Complex requests and flexible layout","title":"Complex requests and flexible layout","text":"using Speasy\nspz = speasy\n\nusing CairoMakie, SpacePhysicsMakie","category":"page"},{"location":"examples/speasy/#A-complex-requests","page":"Complex requests and flexible layout","title":"A complex requests","text":"","category":"section"},{"location":"examples/speasy/","page":"Complex requests and flexible layout","title":"Complex requests and flexible layout","text":"data = let intervals = [\"2019-01-02T15\", \"2019-01-02T16\"]\n    products = [\n        spz.inventories.tree.cda.MMS.MMS1.FGM.MMS1_FGM_SRVY_L2.mms1_fgm_b_gse_srvy_l2_clean,\n        spz.inventories.tree.cda.MMS.MMS1.SCM.MMS1_SCM_SRVY_L2_SCSRVY.mms1_scm_acb_gse_scsrvy_srvy_l2,\n        spz.inventories.tree.cda.MMS.MMS1.DES.MMS1_FPI_FAST_L2_DES_MOMS.mms1_des_bulkv_gse_fast,\n        spz.inventories.tree.cda.MMS.MMS1.DES.MMS1_FPI_FAST_L2_DES_MOMS.mms1_des_temppara_fast,\n        spz.inventories.tree.cda.MMS.MMS1.DES.MMS1_FPI_FAST_L2_DES_MOMS.mms1_des_tempperp_fast,\n        spz.inventories.tree.cda.MMS.MMS1.DES.MMS1_FPI_FAST_L2_DES_MOMS.mms1_des_energyspectr_omni_fast,\n        spz.inventories.tree.cda.MMS.MMS1.DIS.MMS1_FPI_FAST_L2_DIS_MOMS.mms1_dis_energyspectr_omni_fast\n    ]\n    Speasy.get_data(products, intervals)\nend","category":"page"},{"location":"examples/speasy/#Plotting-multiple-time-series-on-a-single-figure","page":"Complex requests and flexible layout","title":"Plotting multiple time series on a single figure","text":"","category":"section"},{"location":"examples/speasy/","page":"Complex requests and flexible layout","title":"Complex requests and flexible layout","text":"let figure = (; size=(1200, 1200)), add_title = true\n    f = Figure(; figure...)\n    tplot(f[1, 1], data[1:3]; add_title)\n    tplot(f[1, 2], [data[4:5], data[6:7]...]; add_title)\n    f\nend","category":"page"},{"location":"tutorials/getting-started/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"We provide a few ways to load data, please see Data for a detailed explanation of the data formats and retrieval methods.","category":"page"},{"location":"tutorials/getting-started/#Get-data-with-Speasy","page":"Quickstart","title":"Get data with Speasy","text":"","category":"section"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"Speasy.jl provides functions to load data from main Space Physics WebServices (CDA,SSC,AMDA,..).","category":"page"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"It could be installed using using Pkg; Pkg.add(\"Speasy\").","category":"page"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"using Speasy: get_data\nusing CairoMakie, SpacePhysicsMakie\n\n# da = get_data(\"amda/imf\", \"2016-6-2\", \"2016-6-5\")\nda = get_data(\"cda/OMNI_HRO_1MIN/Pressure\", \"2016-6-2\", \"2016-6-3\"; sanitize=true)","category":"page"},{"location":"tutorials/getting-started/#Plot-the-data","page":"Quickstart","title":"Plot the data","text":"","category":"section"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"tplot(da)","category":"page"},{"location":"tutorials/getting-started/#Get-data-using-Heliophysics-Application-Programmer's-Interface-(HAPI)","page":"Quickstart","title":"Get data using Heliophysics Application Programmer's Interface (HAPI)","text":"","category":"section"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"HAPIClient.jl provides functions to load data from HAPI-compliant servers.","category":"page"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"It could be installed using using Pkg; Pkg.add(\"HAPIClient\").","category":"page"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"using HAPIClient: get_data\n\nda = get_data(\"CDAWeb/AC_H0_MFI/Magnitude,BGSEc\", \"2001-1-2\", \"2001-1-2T6\")","category":"page"},{"location":"tutorials/getting-started/#Plot-the-data-2","page":"Quickstart","title":"Plot the data","text":"","category":"section"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"using CairoMakie, SpacePhysicsMakie\n\ntplot(da)","category":"page"},{"location":"tutorials/getting-started/#Get-data-with-PySPEDAS","page":"Quickstart","title":"Get data with PySPEDAS","text":"","category":"section"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"PySPEDAS.jl provides a Julia interface to the PySPEDAS Python package, offering a similar API for Julia users to utilize the existing Python routines.","category":"page"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"It could be installed using using Pkg; Pkg.add(\"PySPEDAS\").","category":"page"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"using SpacePhysicsMakie: tplot\nusing PySPEDAS.Projects\nusing DimensionalData\nusing CairoMakie\n\nda = themis.fgm([\"2020-04-20/06:00\", \"2020-04-20/08:00\"], time_clip=true, probe=\"d\");\nkeys(da)\n# Same as more verbose `pyspedas.projects.themis.fgm(...)`","category":"page"},{"location":"tutorials/getting-started/#Plot-the-data-3","page":"Quickstart","title":"Plot the data","text":"","category":"section"},{"location":"tutorials/getting-started/","page":"Quickstart","title":"Quickstart","text":"f = Figure()\ntplot(f[1,1], [da.thd_fgs_gsm, da.thd_fgs_btotal])\ntplot(f[2,1], [DimArray(da.thd_fgl_gsm), DimArray(da.thd_fgl_btotal)])\nf","category":"page"},{"location":"explanations/smooth/#Averaging-and-smoothing","page":"Averaging and smoothing","title":"Averaging and smoothing","text":"","category":"section"},{"location":"explanations/smooth/#Exponential-smoothing","page":"Averaging and smoothing","title":"Exponential smoothing","text":"","category":"section"},{"location":"explanations/smooth/","page":"Averaging and smoothing","title":"Averaging and smoothing","text":"Wikipedia","category":"page"},{"location":"examples/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"This page contains a set of examples for you to start with.","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Basic interactive tplot\nInteractive tplot with Speasy\nSpeasy example","category":"page"},{"location":"examples/#Examples-in-the-wild","page":"Overview","title":"Examples in the wild","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"Blog post\nEPSS 261 - Data Analysis Methods in Space Physics :  Comprehensive examples of using SPEDAS.jl (timeseries arithmetics, processing, visualization, coordinate transformations, minimum and maximum variance technique, reciprocal vectors technique, multi-spacecraft analysis, wave time-frequency and polarization analysis, etc.)","category":"page"},{"location":"examples/interactive_speasy/#Interactive-tplot-with-Speasy","page":"Interactive tplot with Speasy","title":"Interactive tplot with Speasy","text":"","category":"section"},{"location":"examples/interactive_speasy/#Visual-exploration-of-OMNI-data","page":"Interactive tplot with Speasy","title":"Visual exploration of OMNI data","text":"","category":"section"},{"location":"examples/interactive_speasy/#tplot-with-Speasy-product-ID-strings","page":"Interactive tplot with Speasy","title":"tplot with Speasy product ID strings","text":"","category":"section"},{"location":"examples/interactive_speasy/","page":"Interactive tplot with Speasy","title":"Interactive tplot with Speasy","text":"using Speasy\nusing Dates\nusing CairoMakie, SpacePhysicsMakie\n\nt0 = DateTime(\"2008-09-05T10:00:00\")\nt1 = DateTime(\"2008-09-05T22:00:00\")\ntvars = spz\"cda/OMNI_HRO_1MIN/flow_speed,E,Pressure\"\nf, axes = tplot(tvars, t0, t1)","category":"page"},{"location":"examples/interactive_speasy/#Interactive-tplot","page":"Interactive tplot with Speasy","title":"Interactive tplot","text":"","category":"section"},{"location":"examples/interactive_speasy/","page":"Interactive tplot with Speasy","title":"Interactive tplot with Speasy","text":"Here we simulate a user interacting with the plot by progressively zooming out in time with tlims!. Note: For real-time interactivity, consider using the GLMakie backend instead of CairoMakie.","category":"page"},{"location":"examples/interactive_speasy/","page":"Interactive tplot with Speasy","title":"Interactive tplot with Speasy","text":"dt = Hour(12)\n\nrecord(f, \"interactive_speasy.mp4\", 1:5; framerate=1) do n\n    tlims!(t0 - n * dt, t1 + n * dt)\n    sleep(1)\nend","category":"page"},{"location":"examples/interactive_speasy/","page":"Interactive tplot with Speasy","title":"Interactive tplot with Speasy","text":"<video autoplay loop muted playsinline controls src=\"../interactive_speasy.mp4\" />","category":"page"},{"location":"explanations/timeseries/#Time-Series-Utilities","page":"Time Series Utilities","title":"Time Series Utilities","text":"","category":"section"},{"location":"explanations/timeseries/","page":"Time Series Utilities","title":"Time Series Utilities","text":"See TimeseriesUtilities.jl for a collection of utilities and tutorials to simplify common time series analysis.","category":"page"},{"location":"explanations/timeseries/","page":"Time Series Utilities","title":"Time Series Utilities","text":"outliers: remove spikes from signal.","category":"page"},{"location":"observatory/#Observatory-Modules","page":"Observatory Modules","title":"Observatory Modules","text":"","category":"section"},{"location":"observatory/","page":"Observatory Modules","title":"Observatory Modules","text":"Observatory: The host (spacecraft, network, facility) for instruments making observations.","category":"page"},{"location":"observatory/","page":"Observatory Modules","title":"Observatory Modules","text":"See Data Model section for more details.","category":"page"},{"location":"observatory/#References","page":"Observatory Modules","title":"References","text":"","category":"section"},{"location":"observatory/","page":"Observatory Modules","title":"Observatory Modules","text":"SPASE Data Model\nPySPEDAS Projects","category":"page"},{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#Data-Model","page":"API","title":"Data Model","text":"","category":"section"},{"location":"api/#SpaceDataModel.AbstractCoordinateSystem","page":"API","title":"SpaceDataModel.AbstractCoordinateSystem","text":"AbstractCoordinateSystem\n\nBase abstract type for all coordinate system implementations.\n\n\n\n\n\n","category":"type"},{"location":"api/#SpaceDataModel.AbstractCoordinateVector","page":"API","title":"SpaceDataModel.AbstractCoordinateVector","text":"AbstractCoordinateVector\n\nBase abstract type to represent coordinates in a coordinate systems.\n\n\n\n\n\n","category":"type"},{"location":"api/#SpaceDataModel.AbstractDataVariable","page":"API","title":"SpaceDataModel.AbstractDataVariable","text":"A variable v of a type derived from AbstractDataVariable should at least implement:\n\nBase.parent(v): the parent array of the variable\n\nOptional:\n\ntimes(v): the timestamps of the variable\nunits(v): the units of the variable\nmeta(v): the metadata of the variable\nname(v): the name of the variable\n\n\n\n\n\n","category":"type"},{"location":"api/#SpaceDataModel.DataSet","page":"API","title":"SpaceDataModel.DataSet","text":"DataSet <: AbstractDataSet\n\nA concrete dataset with a name, data (parameters), and metadata.\n\n\n\n\n\n","category":"type"},{"location":"api/#SpaceDataModel.DataSet-Tuple{Any, Any}","page":"API","title":"SpaceDataModel.DataSet","text":"Construct a DataSet from a name and data, with optional metadata.\n\n\n\n\n\n","category":"method"},{"location":"api/#SpaceDataModel.DataSet-Tuple{LDataSet}","page":"API","title":"SpaceDataModel.DataSet","text":"DataSet(ld::LDataSet; kwargs...)\n\nCreate a concrete DataSet from a Dataset template with specified data.\n\nSee also: LDataSet\n\n\n\n\n\n","category":"method"},{"location":"api/#SpaceDataModel.Instrument","page":"API","title":"SpaceDataModel.Instrument","text":"Instrument <: AbstractInstrument\n\nFields\n\nname: The name of the instrument\nmetadata: Additional metadata\ndatasets: Collection of datasets\n\n\n\n\n\n","category":"type"},{"location":"api/#SpaceDataModel.Instrument-Tuple{AbstractDict}","page":"API","title":"SpaceDataModel.Instrument","text":"Construct an Instrument from a dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/#SpaceDataModel.Instrument-Tuple{}","page":"API","title":"SpaceDataModel.Instrument","text":"keyword-based constructor\n\n\n\n\n\n","category":"method"},{"location":"api/#SpaceDataModel.LDataSet","page":"API","title":"SpaceDataModel.LDataSet","text":"LDataSet <: AbstractDataSet\n\nA template for generating datasets with parameterized naming patterns.\n\nFields\n\nformat: Format string pattern for the dataset name\ndata: Dictionary of variable patterns\nmetadata: Additional metadata\n\nExamples\n\nusing SPEDAS.MMS\n\n# Access FPI dataset specification\nlds = mms.datasets.fpi_moms\n\n# Create a concrete dataset with specific parameters\nds = DataSet(lds; probe=1, data_rate=\"fast\", data_type=\"des\")\n\nThe format string and variable patterns use placeholders like {probe}, {data_rate},  which are replaced with actual values when creating a concrete DataSet.\n\n\n\n\n\n","category":"type"},{"location":"api/#SpaceDataModel.NoMetadata","page":"API","title":"SpaceDataModel.NoMetadata","text":"NoMetadata\n\nIndicates an object has no metadata. But unlike using nothing,  get, keys and haskey will still work on it, get always returning the fallback argument. keys returns () while haskey always returns false.\n\n\n\n\n\n","category":"type"},{"location":"api/#SpaceDataModel.Project","page":"API","title":"SpaceDataModel.Project","text":"Project <: AbstractProject\n\nA representation of a project or mission containing instruments and datasets.\n\nFields\n\nname: The name of the project\nmetadata: Additional metadata\ninstruments: Collection of instruments\ndatasets: Collection of datasets\n\n\n\n\n\n","category":"type"},{"location":"api/#SpaceDataModel.Project-Tuple{}","page":"API","title":"SpaceDataModel.Project","text":"keyword-based constructor\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:∘-Tuple{Any, AbstractProduct}","page":"API","title":"Base.:∘","text":"Create a new product with the composed function\n\n\n\n\n\n","category":"method"},{"location":"api/#SpaceDataModel._getfield","page":"API","title":"SpaceDataModel._getfield","text":"_getfield(v, name, default)\n\nReturn the field from a composite v for the given name, or the given default if no field is present.\n\nSee also: getfield.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpaceDataModel.getcsys-Tuple{Any}","page":"API","title":"SpaceDataModel.getcsys","text":"getcsys(x)\n\nGet the coordinate system of x.\n\nIf x is a instance of AbstractCoordinateSystem, return x itself. If x is a type of AbstractCoordinateSystem, return an instance of the coordinate system, i.e. x().\n\nThis is a generic function, packages should extend it for their own types.\n\n\n\n\n\n","category":"method"},{"location":"api/#SpaceDataModel.getmeta","page":"API","title":"SpaceDataModel.getmeta","text":"getmeta(x, key, default=nothing)\n\nGet metadata value associated with object x for key key, or default if key is not present.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpaceDataModel.getmeta-Tuple{Any}","page":"API","title":"SpaceDataModel.getmeta","text":"getmeta(x)\n\nGet metadata for object x. If x does not have metadata, return NoMetadata(). \n\n\n\n\n\n","category":"method"},{"location":"api/#SpaceDataModel.is_doy-Tuple{Any}","page":"API","title":"SpaceDataModel.is_doy","text":"Check if a string is in Day of Year format (YYYY-DDD).\n\n\n\n\n\n","category":"method"},{"location":"api/#SpaceDataModel.setmeta","page":"API","title":"SpaceDataModel.setmeta","text":"setmeta(x, key => value, ...; symbolkey => value2, ...)\nsetmeta(x, dict::AbstractDict)\n\nUpdate metadata for object x for key key to have value value and return x.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpaceDataModel.setmeta!","page":"API","title":"SpaceDataModel.setmeta!","text":"setmeta!(x, key => value, ...; symbolkey => value2, ...)\nsetmeta!(x, dict::AbstractDict)\n\nUpdate metadata for object x in-place and return x. The metadata container must be mutable.\n\nThe arguments could be multiple key-value pairs or a dictionary of metadata; keyword arguments are also accepted.\n\nExamples\n\nsetmeta!(x, :units => \"m/s\", :source => \"sensor\")\nsetmeta!(x, Dict(:units => \"m/s\", :quality => \"good\"))\nsetmeta!(x; units=\"m/s\", calibrated=true)\n\nThrows an error if the metadata is not mutable. Use setmeta for immutable metadata.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpaceDataModel.@get","page":"API","title":"SpaceDataModel.@get","text":"@get(collection, key, default)\n\nShort-circuiting version of get. See also @something.\n\n\n\n\n\n","category":"macro"},{"location":"api/#SpaceDataModel.@getfield","page":"API","title":"SpaceDataModel.@getfield","text":"Short-circuiting version of _getfield.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Coordinate-Transformations","page":"API","title":"Coordinate Transformations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"See GeoCotrans.jl and IRBEM.jl for more details.","category":"page"},{"location":"api/#SPEDAS.cotrans","page":"API","title":"SPEDAS.cotrans","text":"cotrans(A, in, out)\ncotrans(A, out; in=get_coord(A))\n\nTransform the data to the out coordinate system from the in coordinate system.\n\nThis function automatically choose between Julia's GeoCotrans (if available) and Fortran's IRBEM implementation.\n\nReferences:\n\nIRBEM-LIB: compute magnetic coordinates and perform coordinate conversions (Documentation, IRBEM.jl)\nSPEDAS Cotrans\n\n\n\n\n\n","category":"function"},{"location":"api/#SPEDAS","page":"API","title":"SPEDAS","text":"","category":"section"},{"location":"api/#SPEDAS.SPEDAS","page":"API","title":"SPEDAS.SPEDAS","text":"Julia-based Space Physics Environment Data Analysis Software\n\nSee the Documentation for more information.\n\n\n\n\n\n","category":"module"},{"location":"api/#SPEDAS.B_x3_error-NTuple{8, Any}","page":"API","title":"SPEDAS.B_x3_error","text":"Calculate the composite statistical error estimate for ⟨B·x₃⟩: |Δ⟨B·x₃⟩| = √(λ₃/(M-1) + (Δφ₃₂⟨B⟩·x₂)² + (Δφ₃₁⟨B⟩·x₁)²)\n\nParameters:\n\nλ₁, λ₂, λ₃: eigenvalues in descending order\nM: number of samples\nB: mean magnetic field vector\nx₁, x₂, x₃: eigenvectors\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.ConstantThicknessApproach-Tuple{Any, Any, Any}","page":"API","title":"SPEDAS.ConstantThicknessApproach","text":"Constant Thickness Approach (CTA) for determining boundary normal and velocity. Based on the method described in Haaland et al., Annales Geophysicae, 2004.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.ConstantVelocityApproach-Tuple{Any, Any, Any}","page":"API","title":"SPEDAS.ConstantVelocityApproach","text":"ConstantVelocityApproach(positions, times, durations)\n\nGiven durations of the boundary crossings, calculate the thickness of the boundary\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.ConstantVelocityApproach-Tuple{Any, Any}","page":"API","title":"SPEDAS.ConstantVelocityApproach","text":"CVA(positions, times)\n\nConstant Velocity Approach (CVA) for determining boundary normal and velocity. Solve timing equation: D * m = Δts\n\nParameters:\n\npositions: Positions of 4 spacecraft (4×3 array)\ntimes: Times of boundary crossing for each spacecraft\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.DiscontinuityAnalyzer","page":"API","title":"SPEDAS.DiscontinuityAnalyzer","text":"Discontinuity Analyzer (DA) for analyzing properties of discontinuities using multi-spacecraft measurements.\n\n\n\n\n\n","category":"function"},{"location":"api/#SPEDAS.amap-Tuple{Any, DimensionalData.AbstractDimArray, DimensionalData.AbstractDimArray}","page":"API","title":"SPEDAS.amap","text":"amap(f, a, b)\n\nApply a function f to the intersection of a and b.\n\nhttps://github.com/rafaqz/DimensionalData.jl/issues/914\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.angle-Tuple{AbstractVector, AbstractVector}","page":"API","title":"SPEDAS.angle","text":"Return the angle between two vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.check_mva_eigen-Tuple{Any}","page":"API","title":"SPEDAS.check_mva_eigen","text":"check_mva_eigen(F; r=5, verbose=false)\n\nCheck the quality of the MVA result.\n\nIf λ₁ ≥ λ₂ ≥ λ₃ are 3 eigenvalues of the constructed matrix M, then a good indicator of nice fitting LMN coordinate system should have abs(λ₂  λ₃)  r.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.cotrans-Tuple{Any, Any, Any}","page":"API","title":"SPEDAS.cotrans","text":"cotrans(A, in, out)\ncotrans(A, out; in=get_coord(A))\n\nTransform the data to the out coordinate system from the in coordinate system.\n\nThis function automatically choose between Julia's GeoCotrans (if available) and Fortran's IRBEM implementation.\n\nReferences:\n\nIRBEM-LIB: compute magnetic coordinates and perform coordinate conversions (Documentation, IRBEM.jl)\nSPEDAS Cotrans\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.current_density-Tuple{Any, Any}","page":"API","title":"SPEDAS.current_density","text":"current_density(B, V)\n\nCalculate the current density time series from the magnetic field (B) and plasma velocity (V) time series.\n\nAssume 1-D structure along the z-direction. Remember to transform the coordinates of B and V first (e.g. using mva\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.ensure_nxm-Tuple{Any, Any, Any}","page":"API","title":"SPEDAS.ensure_nxm","text":"Transform matrix-like A to n×m shape\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.fac_mat-Tuple{AbstractVector}","page":"API","title":"SPEDAS.fac_mat","text":"fac_mat(vec::AbstractVector; xref=[1.0, 0.0, 0.0])\n\nGenerates a field-aligned coordinate (FAC) transformation matrix for a vector.\n\nArguments\n\nvec: A 3-element vector representing the magnetic field\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.fill_gaps-Union{Tuple{T}, Tuple{AbstractVector{T}, Any}} where T","page":"API","title":"SPEDAS.fill_gaps","text":"fill_gaps(times, data; resolution, margin)\n\nGiven a sorted vector of time stamps times and corresponding data values, this function inserts missing time stamps with a value of NaN if the gap between consecutive time stamps is larger than resolution + margin.\n\nIf the gap is only slightly larger (within margin of the resolution), no gap is inserted.\nThe function supports numeric times or DateTime (with appropriate resolution types).\n\nArguments\n\ntimes: Sorted vector of time stamps.\nresolution: The expected time difference between consecutive time stamps.\nmargin: Allowed deviation from resolution before inserting missing time stamps.\n\nReturns\n\nA tuple (full_times, full_values) where:\n\nfull_times is a vector containing all time stamps (original and inserted).\nfull_values is a vector of data values with NaN for inserted gaps.\n\nReferences\n\nhttps://pyspedas.readthedocs.io/en/latest/modules/pytplot/tplotmath/degap.html\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.find_continuous_timeranges-Tuple{Any, Any}","page":"API","title":"SPEDAS.find_continuous_timeranges","text":"find_continuous_timeranges(x, max_dt)\n\nFind continuous time ranges for x (e.g. times or DimArray). max_dt is the maximum time gap between consecutive times.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.interpolate_nans-Tuple{Any, Any}","page":"API","title":"SPEDAS.interpolate_nans","text":"interpolate_nans(da; interp=LinearInterpolation)\n\nInterpolate only the NaN values in da along the specified dimension dims. Non-NaN values are preserved exactly as they are.\n\nThe default interpolation method interp is LinearInterpolation.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.lingradest-NTuple{16, Any}","page":"API","title":"SPEDAS.lingradest","text":"lingradest(\n    Bx1, Bx2, Bx3, Bx4,\n    By1, By2, By3, By4,\n    Bz1, Bz2, Bz3, Bz4,\n    R1, R2, R3, R4\n)\n\nSPEDAS-argument-compatible version of lingradest.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.lingradest-NTuple{8, Any}","page":"API","title":"SPEDAS.lingradest","text":"lingradest(B1, B2, B3, B4, R1, R2, R3, R4)\n\nCompute spatial derivatives such as grad, div, curl and curvature using reciprocal vector technique (linear interpolation).\n\nArguments\n\nB1, B2, B3, B4: 3-element vectors giving magnetic field measurements at each probe\nR1, R2, R3, R4: 3-element vectors giving the probe positions\n\nReturns\n\nA named tuple containing:   • Rbary: Barycenter position   • Bbc: Magnetic field at the barycenter   • Bmag: Magnetic field magnitude at the barycenter   • LGBx, LGBy, LGBz: Linear gradient estimators for each component   • LD: Linear divergence estimator   • LCB: Linear curl estimator   • curvature: Field‐line curvature vector   • R_c: Field‐line curvature radius\n\nReferences\n\nBased on the method of Chanteur (ISSI, 1998, Ch. 11).\n\nlingradest.pro\nlingradest.py\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.lingradest-Tuple{DimensionalData.AbstractDimArray, Vararg{Any}}","page":"API","title":"SPEDAS.lingradest","text":"lingradest(B1::AbstractDimArray, args...)\n\nMethod for handling dimensional arrays. Takes AbstractDimArray inputs with a time dimension and returns a DimStack containing all computed quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.lingradest-Tuple{Union{AbstractArray{<:AbstractVector}, AbstractMatrix}, Vararg{Any}}","page":"API","title":"SPEDAS.lingradest","text":"lingradest(B1::MatrixLike, args...)\n\nVectorized method for simplified usage. Returns a StructArray containing the results.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.m2nV-Tuple{Any}","page":"API","title":"SPEDAS.m2nV","text":"Convert slowness vector 𝐦 = 𝐧V to normal vector and velocity\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.mva","page":"API","title":"SPEDAS.mva","text":"mva(V, B=V; kwargs...)\n\nRotate a timeseries V into the LMN coordinates based on the reference field B.\n\nArguments\n\nV: The timeseries data to be transformed, where each column represents a component\nB: The reference field used to determine the minimum variance directions, where each column represents a component\n\nSee also: mva_eigen, rotate\n\n\n\n\n\n","category":"function"},{"location":"api/#SPEDAS.mva_eigen-Tuple{Any}","page":"API","title":"SPEDAS.mva_eigen","text":"mva_eigen(B::AbstractMatrix; dim = nothing, sort=(;), check=false) -> F::Eigen\n\nPerform minimum variance analysis for B (which varies along the dim dimension).\n\nReturn Eigen factorization object F which contains the eigenvalues in F.values and the eigenvectors in the columns of the matrix F.vectors.\n\nSet check=true to check the reliability of the result.\n\nThe kth eigenvector can be obtained from the slice F.vectors[:, k].\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.nt2ds-Tuple{Any, Any}","page":"API","title":"SPEDAS.nt2ds","text":"nt2ds(nt_arr, dim; fields=propertynames(first(nt_arr)))\n\nConvert a NamedTuple array to a DimStack of DimArrays.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.phase_factor-Tuple{Any}","page":"API","title":"SPEDAS.phase_factor","text":"Phase factor exp (i φ) satisfies the following equation\n\nexp (4 i φ) = exp (-2 i γ)\n\nwhere\n\nγ = arctan (2 Re(𝐮)^𝐓 Im(𝐮) (Re(𝐮)^2-Im(𝐮)^2))\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.polarization-NTuple{4, Any}","page":"API","title":"SPEDAS.polarization","text":"polarization(S0, S1, S2, S3)\npolarization(S::StokesVector)\n\nCompute the degree of polarization (p) from Stoke parameters or a Stokes vector.\n\nReference\n\nWikipedia\nStokes parameters\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.polarization-Tuple{Any}","page":"API","title":"SPEDAS.polarization","text":"polarization(S)\n\nCompute the degree of polarization (DOP) p^2 from spectral matrix S.\n\nbeginaligned\np^2  = 1-frac(tr 𝐒)^2-(tr 𝐒^2)(tr 𝐒)^2-n^-1(tr 𝐒)^2 \n    = fracn(tr 𝐒^2)-(tr 𝐒)^2(n-1)(tr 𝐒)^2\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.position_tensor-Tuple{AbstractVector{<:AbstractVector}}","page":"API","title":"SPEDAS.position_tensor","text":"𝐑 = _α (𝐫_α-𝐫_b) (𝐫_α-𝐫_b) = _α 𝐫_α 𝐫_α-𝐫_b 𝐫_b\n\nwith 𝐫_b = _α 𝐫_α  N and N is the number of positions.\n\nReferences\n\nPaschmann and Daly [2] Paschmann & Daly, 2008. Section 4.7\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.pspectrum-Tuple{DimensionalData.AbstractDimVector, SignalAnalysis.Spectrogram}","page":"API","title":"SPEDAS.pspectrum","text":"pspectrum(x::AbstractDimArray, spec::Spectrogram)\npspectrum(x::AbstractDimArray; nfft=256, noverlap=128, window=hamming)\n\nCompute the power spectrum (time-frequency representation) of a time series using the short-time Fourier transform.\n\nReturns a DimArray with frequency and original time dimensions.\n\nSee also: DSP.Spectrogram, DSP.stft\n\nReference\n\nMatlab\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.reciprocal_vector-NTuple{4, Any}","page":"API","title":"SPEDAS.reciprocal_vector","text":"reciprocal_vector(rα, rβ, rγ, rλ)\n\nCompute the reciprocal vector 𝒌_α for a vertex of a tetrahedron given the position vectors of all vertices.\n\nThe vertices (α, β, γ, λ) must form a cyclic permutation of (1, 2, 3, 4).\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.reciprocal_vector-Tuple{Any, AbstractVector{<:AbstractVector}}","page":"API","title":"SPEDAS.reciprocal_vector","text":"reciprocal_vector(rα, r0s::AbstractVector{<:AbstractVector})\n\nGeneralised reciprocal vector for N != 4\n\n𝐪_α = 𝐑^-1 𝐫_α\n\nSee also: reciprocal_vector, position_tensor\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.reciprocal_vector-Tuple{Any, Any, Any}","page":"API","title":"SPEDAS.reciprocal_vector","text":"reciprocal_vector(r_βα, r_βγ, r_βλ)\n\nCompute the reciprocal vector 𝒌_α for a vertex of a tetrahedron given the relative position vectors.\n\n𝒌_α = frac𝐫_βγ  𝐫_βλ𝐫_βα  (𝐫_βγ  𝐫_βλ)\n\nwhere 𝐫_αβ = r_β - r_α are relative position vectors.\n\nReferences\n\nMulti-spacecraft analysis methods revisited : 4.3 Properties of reciprocal vectors\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.reciprocal_vectors-NTuple{4, Any}","page":"API","title":"SPEDAS.reciprocal_vectors","text":"Compute the set of reciprocal vectors {𝒌_α}, which is also called the reciprocal base of the tetrahedron.\n\nSee also: reciprocal_vector\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.resample-Tuple{Any, Any}","page":"API","title":"SPEDAS.resample","text":"resample(arr, n; dim=1, verbose=false)\n\nResample an array along the dimension dim to n points. If the original length is less than or equal to n, the original array is returned unchanged.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.rotate-Tuple{AbstractMatrix, AbstractMatrix}","page":"API","title":"SPEDAS.rotate","text":"rotate(ts::AbstractMatrix, mat::AbstractMatrix)\n\nCoordinate-aware transformation of vector/matrix by rotation matrix(s) mat(s). Assume ts is a matrix of shape (n, 3).\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.set_coord-Tuple{Any, Any}","page":"API","title":"SPEDAS.set_coord","text":"Set the coordinate system.\n\nUpdates legend names and axis labels if they include the coordinate system. Also updates the dimension name if it contains the coordinate system.\n\nReference:\n\nhttps://pyspedas.readthedocs.io/en/latest/modules/pytplot/dataattgetterssetters.html#set_coords\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.smooth_spectral_matrix!-Tuple{Any, Any, Any}","page":"API","title":"SPEDAS.smooth_spectral_matrix!","text":"smooth_spectral_matrix!(S_smooth, S, aa)\n\nIn-place version of smooth_spectral_matrix that writes results to a pre-allocated array.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.smooth_spectral_matrix-Tuple{Any, Any}","page":"API","title":"SPEDAS.smooth_spectral_matrix","text":"smooth_spectral_matrix(S, aa)\n\nSmooth the spectral matrix S(f) by applying a weighted average over frequency. The smoothing uses a symmetric window aa (for example, a Hamming window) of length M.\n\nArguments\n\nS: Spectral matrix array of size N_freq n n where n is the number of components.\naa: Weighting vector of length M.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.spectral_matrix-Tuple{AbstractMatrix{<:Complex}}","page":"API","title":"SPEDAS.spectral_matrix","text":"spectral_matrix(Xf)\n\nCompute the spectral matrix S defined by\n\nS_ij(f) = X_i(f) X_j^*(f)\n\nwhere X_i(f)=Xf[f, i] is the FFT of the i-th component and * denotes complex conjugation.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.spectral_matrix-Tuple{AbstractMatrix{<:Real}}","page":"API","title":"SPEDAS.spectral_matrix","text":"spectral_matrix(X, window)\n\nCompute the spectral matrix S(f) given the time series data X.\n\nReturns a 3-D array of size N_freq n n, where N_freq = lfloor N2 rfloor      and n is the dimensionality (number of components).\n\nArguments\n\nX: Matrix where each column is a component of the multivariate time series, or a vector of vectors.\nwindow: A window function (optional). If not provided, a rectangular window (no windowing) is used.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.tetrahedron_quality-Tuple{AbstractVector{<:AbstractVector}}","page":"API","title":"SPEDAS.tetrahedron_quality","text":"Calculate tetrahedron quality factors\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.tinterp-Tuple{Any, Any}","page":"API","title":"SPEDAS.tinterp","text":"tinterp(A, t; interp=LinearInterpolation)\n\nInterpolate time series A at time point(s) t using interp (default: LinearInterpolation) method. Returns interpolated value for single time point or DimArray for multiple time points.\n\nSee DataInterpolations.jl for available interpolation methods.\n\nExamples\n\n# Interpolate at a single time point\ntinterp(time_series, DateTime(\"2023-01-01T12:00:00\"))\n\n# Interpolate at multiple time points using cubic spline interpolation\nnew_times = DateTime(\"2023-01-01\"):Hour(1):DateTime(\"2023-01-02\")\ntinterp(time_series, new_times; interp = CubicSpline)\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.tinterp-Tuple{Any, DimensionalData.AbstractDimArray}","page":"API","title":"SPEDAS.tinterp","text":"tinterp(A, B; interp=LinearInterpolation)\n\nInterpolate A to times in B\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.tinterp_nans-Tuple{DimensionalData.AbstractDimArray}","page":"API","title":"SPEDAS.tinterp_nans","text":"tinterp_nans(da::AbstractDimArray; query=timeDimType, kwargs...)\n\nInterpolate only the NaN values in da along the specified dimensions query. Non-NaN values are preserved exactly as they are.\n\nSee also interpolate_nans\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.tresample-Tuple{DimensionalData.DimArray, Any}","page":"API","title":"SPEDAS.tresample","text":"tresample(da::DimArray, n; dim = nothing, query=nothing)\n\nResample a DimArray specifically along its dimension dim or query to n points. Throws an error if no dimension of type dimtype is found in the array.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.tstack-Tuple{AbstractVector{<:AbstractVector}}","page":"API","title":"SPEDAS.tstack","text":"tstack(vectors::AbstractVector{<:AbstractVector{T}})\n\nStack a time series of vectors into a matrix. \n\nBy default, each row in the output matrix represents a time point from the input vector of vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.tsync-Tuple{Any, Vararg{Any}}","page":"API","title":"SPEDAS.tsync","text":"tsync(A, Bs...)\n\nSynchronize multiple time series to have the same time points.\n\nThis function aligns the time series Bs... to match the time points of A by:\n\nFinding the common time range between all input time series\nExtracting the subset of A within this common range\nInterpolating each series in Bs... to match the time points of the subset of A\n\nReturns a tuple containing the synchronized time series, with the first element being the subset of A and subsequent elements being the interpolated versions of Bs....\n\nExamples\n\nA_sync, B_sync, C_sync = tsync(A, B, C)\n\nSee also: tinterp, common_timerange\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.twavpol-Tuple{Any}","page":"API","title":"SPEDAS.twavpol","text":"twavpol(x)\n\nA convenience wrapper around wavpol that works with DimensionalData arrays.\n\nIt automatically extracts the time dimension and returns the results as a DimStack with properly labeled dimensions.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.wave_normal_angle-Tuple{Any}","page":"API","title":"SPEDAS.wave_normal_angle","text":"Wave normal angle is the angle between (wnx, wny) and the vertical |wnz| Use the imaginary parts of off-diagonals. Define:A = Im(S₁₂) B = Im(S₁₃) C = Im(S₂₃)\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.wavpol-Union{Tuple{n}, Tuple{T}, Tuple{AbstractMatrix{T}, Val{n}}, Tuple{AbstractMatrix{T}, Val{n}, Any}} where {T<:Number, n}","page":"API","title":"SPEDAS.wavpol","text":"wavpol(X, fs=1; nfft=256, noverlap=div(nfft, 2), smooth_t=_smooth_t(nfft), smooth_f=hamming(3), nbuffers=Threads.nthreads())\n\nPerform polarization analysis of n-component time series data.\n\nFor each FFT window (with specified overlap), the routine:\n\nApplies a time-domain window function and computes the FFT to construct the spectral matrix S(f)\nApplies frequency smoothing using a window function\nComputes wave parameters: power, degree of polarization, wave normal angle, ellipticity, and helicity\n\nThe analysis assumes the data are in a right-handed, field-aligned coordinate system  (with Z along the ambient magnetic field).\n\nArguments\n\nX: Matrix where each column is a component of the multivariate time series\nfs: Sampling frequency (default: 1)\n\nKeywords\n\nnfft: Number of points for FFT (default: 256)\nnoverlap: Number of overlapping points between windows (default: nfft÷2)\nsmooth_t: Time domain window function (default: Hann window)\nsmooth_f: Frequency domain smoothing window (default: 3-point Hamming window)\nnbuffers: Number of pre-allocated buffers for parallel processing (default: number of threads)\n\nReturns\n\nA named tuple containing:\n\nindices: Time indices for each FFT window\nfreqs: Frequency array\npower: Power spectral density, normalized by frequency bin width and window function\ndegpol: Degree of polarization [0,1]\nwaveangle: Wave normal angle [0,π/2]\nellipticity: Wave ellipticity [-1,1], negative for left-hand polarized\nhelicity: Wave helicity\n\nSee also: polarization, wave_normal_angle, wpol_helicity\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.wpol_helicity-Tuple{AbstractMatrix{ComplexF64}, Number}","page":"API","title":"SPEDAS.wpol_helicity","text":"wpol_helicity(S, waveangle)\n\nCompute helicity and ellipticity for a single frequency.\n\nArguments\n\nS: Spectral matrix for a single frequency, size (3,3)\nwaveangle: Wave normal angle for this frequency\n\nReturns\n\nhelicity: Average helicity across the three components\nellipticity: Average ellipticity across the three components\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.Δφij-NTuple{4, Any}","page":"API","title":"SPEDAS.Δφij","text":"Δφij(λᵢ, λⱼ, λ₃, M)\n\nCalculate the phase error between components i and j according to: |Δφᵢⱼ| = |Δφⱼᵢ| = √(λ₃/(M-1) * (λᵢ + λⱼ - λ₃)/(λᵢ - λⱼ)²)\n\nParameters:\n\nλᵢ: eigenvalue i\nλⱼ: eigenvalue j\nλ₃: smallest eigenvalue (λ₃)\nM: number of samples\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.ω2f-Tuple{Any}","page":"API","title":"SPEDAS.ω2f","text":"Convert angular frequency to frequency\n\nReference: https://www.wikiwand.com/en/articles/Angular_frequency\n\n\n\n\n\n","category":"method"},{"location":"api/#SPEDAS.@load_project_config-Tuple{Any}","page":"API","title":"SPEDAS.@load_project_config","text":"@load_project_config(file)\n\nLoad configuration from a file and export all key-value pairs as constants. The macro evaluates in the calling module's context.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Timeseries-Utilities","page":"API","title":"Timeseries Utilities","text":"","category":"section"},{"location":"api/#TimeseriesUtilities.TimeseriesUtilities","page":"API","title":"TimeseriesUtilities.TimeseriesUtilities","text":"TimeseriesUtilities\n\nA collection of utilities to simplify common time series analysis.\n\nFrom data cleaning to arithmetic operations (e.g. linear algebra) to common time series operations (e.g. resampling, filtering).\n\nData Cleaning\n\nfind_outliers, find_outliers_median, find_outliers_mean\nreplace_outliers, replace_outliers!\n\nQuery\n\ntimes, time_grid\ntimerange, common_timerange\n\n(Windowed) Statistics\n\ntstat\ntmean\ntmedian\ntsum\ntvar\ntstd\ntsem\n\nAlgebra\n\ntcross\ntdot\ntnorm\ntsproj, tproj, toproj\ntsubtract\ntderiv\n\nTime-Domain Operations\n\ntselect\ntclip, tclips\ntview\ntmask and tmask!\ntshift\ntsplit\ntgroupby\n\nTime-Frequency Domain Operations\n\ntfilter\n\n\n\n\n\n","category":"module"},{"location":"api/#TimeseriesUtilities.DiffQ","page":"API","title":"TimeseriesUtilities.DiffQ","text":"DiffQ(v, t; dim=1)\n\nDifference quotient of v with respect to t.\n\nTo avoid undefined behavior for division by Date/DateTime, we convert the time difference to a Unitful.Quantity if eltype(v) is not a Unitful.Quantity.\n\n\n\n\n\n","category":"type"},{"location":"api/#TimeseriesUtilities.common_timerange-Tuple{Any, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.common_timerange","text":"common_timerange(x1, xs...)\n\nGet the common time range (intersection) across multiple arrays. If there is no overlap, returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.dimnum","page":"API","title":"TimeseriesUtilities.dimnum","text":"dimnum(x, query)\n\nGet the number(s) of Dimension(s) as ordered in the dimensions of an object.\n\nExtend the function for custom type x. By default, we fall back to DimensionalData.dimnum.\n\n\n\n\n\n","category":"function"},{"location":"api/#TimeseriesUtilities.dropna-Tuple{Any}","page":"API","title":"TimeseriesUtilities.dropna","text":"dropna(A; dim=nothing)\ndropna(A::AbstractDimArray; dim=nothing, query=nothing)\n\nRemove slices containing NaN values along along the dim dimension.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.find_outliers-Tuple{Any}","page":"API","title":"TimeseriesUtilities.find_outliers","text":"find_outliers(A, [method, window]; dim = 1, kw...)\n\nFind outliers in data A along the specified dim dimension.\n\nReturns a Boolean array whose elements are true when an outlier is detected in the corresponding element of A.\n\nThe default method is :median (other option is :mean), which uses the median absolute deviation (MAD) to detect outliers. When the length of A is greater than 256, it uses a moving window of size 16.\n\nSee also: find_outliers_median, find_outliers_mean, isoutlier - MATLAB\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.find_outliers_mean-Tuple{AbstractVector, Any}","page":"API","title":"TimeseriesUtilities.find_outliers_mean","text":"find_outliers_mean(x::AbstractVector, window; threshold = 3)\n\nFind outliers that are defined as elements more than three standard deviations from the mean.\n\nThis method is faster but less robust than find_outliers_median.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.find_outliers_median-Tuple{AbstractVector, Any}","page":"API","title":"TimeseriesUtilities.find_outliers_median","text":"find_outliers_median(x, window; threshold=3)\n\nFind outliers that are defined as elements more than threshold=3 times the scaled median absolute deviation (MAD) from the median.\n\nWhen window is set to a integer, a moving window of that size is used to compute local MAD. Otherwise, global statistics are used.\n\nReferences\n\nMedian absolute deviation - Wikipedia\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.groupby_dynamic","page":"API","title":"TimeseriesUtilities.groupby_dynamic","text":"Group x into windows based on every and period.\n\n\n\n\n\n","category":"function"},{"location":"api/#TimeseriesUtilities.interpolate_outliers!-Tuple{Any, Any, Any}","page":"API","title":"TimeseriesUtilities.interpolate_outliers!","text":"interpolate_outliers!(x, t, outliers)\n\nInterpolate outliers in x using interpolation of neighboring non-outlier values.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.oproj-Tuple{Any, Any}","page":"API","title":"TimeseriesUtilities.oproj","text":"Vector rejection\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.proj-Tuple{Any, Any}","page":"API","title":"TimeseriesUtilities.proj","text":"proj(a, b)\n\nVector projection of a vector a on (or onto) a nonzero vector b.\n\nReferences: Wikipedia\n\nSee also: sproj, oproj\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.rectify-Tuple{Any}","page":"API","title":"TimeseriesUtilities.rectify","text":"Rectify the time step of a DimArray to be uniform.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.replace_outliers!-Tuple{Any, Any, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.replace_outliers!","text":"replace_outliers!(A, s, [find_method, window]; kwargs...)\n\nFinds outliers in A and replaces them with s (by default: NaN).\n\nSee also: find_outliers, filloutliers - MATLAB\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.replace_outliers!-Tuple{Any, Symbol, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.replace_outliers!","text":"replace_outliers!(A, method, [find_method, window]; kwargs...)\nreplace_outliers!(A, method, outliers; kwargs...)\n\nReplaces outliers in A with values determined by the specified method.\n\nOutliers can be detected using find_outliers with optional find_method and window parameters or specified directly as a Boolean array outliers.\n\nmethod can be one of the following:\n\n:linear: Linear interpolation of neighboring, nonoutlier values\n:previous: Previous nonoutlier value\n:next: Next nonoutlier value\n:nearest: Nearest nonoutlier value\n\nSee also: filloutliers - MATLAB\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.replace_outliers-Tuple{Any, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.replace_outliers","text":"replace_outliers(A; args...; kw...)\n\nNon-mutable version of replace_outliers!.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.smooth-Tuple{Any, Any}","page":"API","title":"TimeseriesUtilities.smooth","text":"smooth(da::AbstractDimArray, window; dim=Ti, suffix=\"_smoothed\", kwargs...)\n\nSmooths a time series by computing a moving average over a sliding window.\n\nThe size of the sliding window can be either:\n\nQuantity: A time duration that will be converted to number of samples based on data resolution\nInteger: Number of samples directly\n\nArguments\n\ndims=Ti: Dimension along which to perform smoothing (default: time dimension)\nsuffix=\"_smoothed\": Suffix to append to the variable name in output\nkwargs...: Additional arguments passed to RollingWindowArrays.rolling\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.sproj-Tuple{Any, Any}","page":"API","title":"TimeseriesUtilities.sproj","text":"Scalar projection\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tclip-Tuple{DimensionalData.AbstractDimArray, Any, Any}","page":"API","title":"TimeseriesUtilities.tclip","text":"tclip(A, t0, t1; query=nothing, sort=false)\n\nClip a Dimension or DimArray A to a time range [t0, t1].\n\nFor unordered dimensions, the dimension should be sorted before clipping (see tsort).\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tclips-Union{NTuple{N, Any}, Tuple{N}} where N","page":"API","title":"TimeseriesUtilities.tclips","text":"tclips(xs...; trange=common_timerange(xs...))\n\nClip multiple arrays to a common time range trange.\n\nIf trange is not provided, automatically finds the common time range across all input arrays.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tcross-Tuple{Any, Any}","page":"API","title":"TimeseriesUtilities.tcross","text":"tcross(x, y; dim = nothing, query=nothing)\n\nCompute the cross product of two (arrays of) vectors along the specified dimension dim or query.\n\nReferences:\n\nhttps://docs.xarray.dev/en/stable/generated/xarray.cross.html\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tderiv-Tuple","page":"API","title":"TimeseriesUtilities.tderiv","text":"tderiv(A, times; dim=1)\ntderiv(A; dim = nothing, query = nothing)\n\nCompute the time derivative of A. Set lazy=true for lazy evaluation.\n\nSee also: deriv_data - PySPEDAS\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tdot-Tuple{Any, Any}","page":"API","title":"TimeseriesUtilities.tdot","text":"tdot(x, y; dim=nothing, query=nothing)\n\nDot product of two arrays x and y along the dim dimension.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tfilter","page":"API","title":"TimeseriesUtilities.tfilter","text":"tfilter(da, Wn1, Wn2=samplingrate(da) / 2; designmethod=nothing)\n\nBy default, the max frequency corresponding to the Nyquist frequency is used.\n\nReferences\n\nhttps://docs.juliadsp.org/stable/filters/\nhttps://www.mathworks.com/help/signal/ref/filtfilt.html\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.filtfilt.html\n\nIssues\n\nDSP.jl and Unitful.jl: https://github.com/JuliaDSP/DSP.jl/issues/431\n\n\n\n\n\n","category":"function"},{"location":"api/#TimeseriesUtilities.tgroupby-Tuple{Any, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.tgroupby","text":"tgroupby(x, every, period = every, start_by = :window)\n\nGroup x into windows based on every and period.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.time_grid-Tuple{Any, Any}","page":"API","title":"TimeseriesUtilities.time_grid","text":"time_grid(x, dt)\n\nCreate a time grid from the minimum to maximum time in x with the step size dt.\n\nExamples\n\n# Create hourly time grid\ntime_grid(x, Hour(1))\ntime_grid(x, 1u\"hr\")\n\n# Create 1-s intervals\ntime_grid(x, Second(1))\ntime_grid(x, 1u\"second\")\ntime_grid(x, 1u\"Hz\")\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.timerange-Tuple{Any}","page":"API","title":"TimeseriesUtilities.timerange","text":"timerange(times)\ntimerange(x1, xs...)\n\nGet the time range (minimum and maximum) of time series data.\n\nFor a single argument, returns a tuple (tmin, tmax) containing the minimum and maximum times. For multiple arguments, returns the common time range (intersection) across all arrays - equivalent to common_timerange(x1, xs...).\n\nExamples\n\n# Single time series\ntimes = [1, 2, 3, 4, 5]\ntimerange(times)  # (1, 5)\n\n# Multiple time series - find common range\nx1_times = [1, 2, 3, 4]\nx2_times = [2, 3, 4, 5]\ntimerange(x1_times, x2_times)  # (2, 4)\n\nSee also: common_timerange, tminimum, tmaximum\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.times-Tuple{DimensionalData.AbstractDimArray, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.times","text":"Returns the time indices of x.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tmask!-Tuple{Any, Any, Any}","page":"API","title":"TimeseriesUtilities.tmask!","text":"tmask!(da, t0, t1)\ntmask!(da, it::Interval)\ntmask!(da, its)\n\nMask all data values within the specified time range(s) (t0, t1) / it / its with NaN.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tmask-Tuple{Any, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.tmask","text":"tmask(da, args...; kwargs...)\n\nNon-mutable version of tmask!. See also tmask!.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tmaximum","page":"API","title":"TimeseriesUtilities.tmaximum","text":"tmaximum(x)\n\nGet the maximum timestamp of x.\n\n\n\n\n\n","category":"function"},{"location":"api/#TimeseriesUtilities.tmean-Tuple{Any, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.tmean","text":"tmean(x, [dt]; dim=nothing, query=nothing)\n\nCalculate the arithmetic mean of x along the dim dimension, optionally grouped by dt.\n\nIt returns a value if x is a vector along the dim dimension, otherwise returns a DimArray with the specified dimension dropped.\n\nIf dim is not specified, it defaults to the query dimension (dimension of type TimeDim by default).\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tmedian-Tuple{Any, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.tmedian","text":"tmedian(x, [dt]; dim=nothing, query=nothing)\n\nCalculate the median of x along the dim dimension, optionally grouped by dt.\n\nIt returns a value if x is a vector along the dim dimension, otherwise returns a DimArray with the specified dimension dropped.\n\nIf dim is not specified, it defaults to the query dimension (dimension of type TimeDim by default).\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tminimum","page":"API","title":"TimeseriesUtilities.tminimum","text":"tminimum(x)\n\nGet the minimum timestamp of x.\n\n\n\n\n\n","category":"function"},{"location":"api/#TimeseriesUtilities.tnorm-Tuple{Any}","page":"API","title":"TimeseriesUtilities.tnorm","text":"tnorm(A; dim=nothing, query=nothing)\n\nCompute the norm of each slice in A along the specified dimension dim or query.\n\nSee also: tnorm_combine\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tnorm_combine-Tuple{Any}","page":"API","title":"TimeseriesUtilities.tnorm_combine","text":"tnorm_combine(x; dim=nothing, name=:magnitude)\n\nCalculate the norm of each slice along query dimension and combine it with the original components.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.toproj-Tuple{Any, Any}","page":"API","title":"TimeseriesUtilities.toproj","text":"toproj(A, B; dim=nothing, query=nothing)\n\nCompute vector rejection (orthogonal projection) of array A from B along specified dimension dim or query.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tproj-Tuple{Any, Any}","page":"API","title":"TimeseriesUtilities.tproj","text":"tproj(A, B; dim=nothing, query=nothing)\n\nCompute vector projection of A onto B along specified dimension dim or query.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tselect-Tuple{DimensionalData.AbstractDimArray, Any, Any}","page":"API","title":"TimeseriesUtilities.tselect","text":"tselect(A, t, [δt]; query=nothing)\n\nSelect the value of A closest to time t within the time range [t-δt, t+δt].\n\nSimilar to DimensionalData.Dimensions.Lookups.At but choose the closest value and return missing if the time range is empty.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tsem-Tuple{Any, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.tsem","text":"tsem(x, [dt]; dim=nothing, query=nothing)\n\nCalculate the standard error of the mean of x along the dim dimension, optionally grouped by dt.\n\nIt returns a value if x is a vector along the dim dimension, otherwise returns a DimArray with the specified dimension dropped.\n\nIf dim is not specified, it defaults to the query dimension (dimension of type TimeDim by default).\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tshift","page":"API","title":"TimeseriesUtilities.tshift","text":"tshift(x; dim=TimeDim, t0=nothing, new_dim=nothing)\n\nShift the dim of x by t0.\n\n\n\n\n\n","category":"function"},{"location":"api/#TimeseriesUtilities.tsort-Tuple{Any}","page":"API","title":"TimeseriesUtilities.tsort","text":"tsort(A; query=nothing, rev=false)\n\nSort a DimArray A along the query dimension.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tsplit","page":"API","title":"TimeseriesUtilities.tsplit","text":"tsplit(da::AbstractDimArray, dim=Ti)\n\nSplits up data along dimension dim.\n\n\n\n\n\n","category":"function"},{"location":"api/#TimeseriesUtilities.tsproj-Tuple{Any, Any}","page":"API","title":"TimeseriesUtilities.tsproj","text":"tsproj(A, B; dim=nothing, query=nothing)\n\nCompute scalar projection of A onto B along specified dimension dim or query.\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tstat","page":"API","title":"TimeseriesUtilities.tstat","text":"tstat(f, x, [dt]; dim = nothing)\n\nCalculate the statistic f of x along the dim dimension, optionally grouped by dt.\n\nSee also: groupby_dynamic\n\n\n\n\n\n","category":"function"},{"location":"api/#TimeseriesUtilities.tstd-Tuple{Any, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.tstd","text":"tstd(x, [dt]; dim=nothing, query=nothing)\n\nCalculate the standard deviation of x along the dim dimension, optionally grouped by dt.\n\nIt returns a value if x is a vector along the dim dimension, otherwise returns a DimArray with the specified dimension dropped.\n\nIf dim is not specified, it defaults to the query dimension (dimension of type TimeDim by default).\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tsubtract","page":"API","title":"TimeseriesUtilities.tsubtract","text":"tsubtract(x, f=nanmedian; dims=timedim(x))\n\nSubtract a statistic (default function f: nanmedian) along dimensions (default: time dimension) from x.\n\n\n\n\n\n","category":"function"},{"location":"api/#TimeseriesUtilities.tsum-Tuple{Any, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.tsum","text":"tsum(x, [dt]; dim=nothing, query=nothing)\n\nCalculate the sum of x along the dim dimension, optionally grouped by dt.\n\nIt returns a value if x is a vector along the dim dimension, otherwise returns a DimArray with the specified dimension dropped.\n\nIf dim is not specified, it defaults to the query dimension (dimension of type TimeDim by default).\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tvar-Tuple{Any, Vararg{Any}}","page":"API","title":"TimeseriesUtilities.tvar","text":"tvar(x, [dt]; dim=nothing, query=nothing)\n\nCalculate the variance of x along the dim dimension, optionally grouped by dt.\n\nIt returns a value if x is a vector along the dim dimension, otherwise returns a DimArray with the specified dimension dropped.\n\nIf dim is not specified, it defaults to the query dimension (dimension of type TimeDim by default).\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.tview-Tuple{Any, Any, Any}","page":"API","title":"TimeseriesUtilities.tview","text":"tview(d, t0, t1)\n\nView a dimension or DimArray in time range [t0, t1].\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.unwrap-Tuple{Any}","page":"API","title":"TimeseriesUtilities.unwrap","text":"unwrap(x)\n\nReturn the innermost object of the wrapped object x with similar behavior as x (e.g. same size, same type, etc.)\n\n\n\n\n\n","category":"method"},{"location":"api/#TimeseriesUtilities.window_bf_sizes-Tuple{Integer}","page":"API","title":"TimeseriesUtilities.window_bf_sizes","text":"window_bf_sizes(window)\n\nConverts a window specification to backward and forward window sizes.\n\nWhen window is a positive integer scalar, the window is centered about the current element and contains window-1 neighboring elements. If window is even, then the window is centered about the current and previous elements.\n\n\n\n\n\n","category":"method"},{"location":"explanations/tplot/#Space-Physics-Plotting","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"","category":"section"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"SpacePhysicsMakie.jl provides a set of utilities for visualizing space physics data.","category":"page"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"tplot is a versatile plotting utility that handles various time series formats including vectors, matrices, functions, and strings (product IDs). It renders data as line plots, series plots, heatmaps, or spectrograms.","category":"page"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"tplot offers flexible visualization options, allowing you to display multiple time series either across separate panels or overlaid within the same panel.","category":"page"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"tplot seamlessly integrates with Speasy.jl, automatically downloading and converting data to DimArray when given a product ID string.","category":"page"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"Built on Makie, tplot provides both interactive exploration capabilities and publication-quality output. It features dynamic data loading during zoom/pan operations, efficiently retrieving and rendering data on demand.","category":"page"},{"location":"explanations/tplot/#SpacePhysicsMakie.tplot","page":"Space Physics Plotting","title":"SpacePhysicsMakie.tplot","text":"tplot(f, tas; legend=(; position=Right()), link_xaxes=true, link_yaxes=false, rowgap=5, kwargs...)\n\nLay out multiple time series across different panels (rows) on one Figure / GridPosition f\n\nIf legend is nothing, no legend will be added to the plot. Otherwise, legend can be a NamedTuple containing options for legend placement and styling. By default, the time series are transformed via extensible transform.\n\nSee also: tplot_panel, transform\n\n\n\n\n\n","category":"function"},{"location":"explanations/tplot/#SpacePhysicsMakie.tplot_panel","page":"Space Physics Plotting","title":"SpacePhysicsMakie.tplot_panel","text":"tplot_panel(gp, args...; kwargs...)\n\nGeneric entry point for plotting different types of data on a grid position gp.\n\nTransforms the arguments to appropriate types and calls the plotting function. Dispatches to appropriate implementation based on the plotting trait of the transformed arguments.\n\n\n\n\n\n","category":"function"},{"location":"explanations/tplot/#SpacePhysicsMakie.tplot_panel!","page":"Space Physics Plotting","title":"SpacePhysicsMakie.tplot_panel!","text":"tplot_panel!(ax, args...; kwargs...)\n\nGeneric entry point for adding plots to an existing axis ax.\n\nTransforms the arguments to appropriate types and calls the plotting function. Dispatches to appropriate implementation based on the plotting trait of the transformed arguments.\n\n\n\n\n\n","category":"function"},{"location":"explanations/tplot/#Function-as-tplot-argument-for-interactive-exploration","page":"Space Physics Plotting","title":"Function as tplot argument for interactive exploration","text":"","category":"section"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"tplot can handle functions that accept time intervals as arguments. This allows for creating interactive plots where data is dynamically fetched. So instead of the two-step process:","category":"page"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"Fetch data: da = f(t0, t1)\nPlot data: tplot(da)","category":"page"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"We can combine these steps into a single command:","category":"page"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"tplot(f, t0, t1)","category":"page"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"This approach enables efficient interactive exploration of time series.","category":"page"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"note: Note\nFor real-time interactivity, consider using the GLMakie backend instead of CairoMakie although it is possible to use tlims! or xlims! to update the plot dynamically.","category":"page"},{"location":"explanations/tplot/#Data-Transformation","page":"Space Physics Plotting","title":"Data Transformation","text":"","category":"section"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"Before plotting, data goes through a transformation pipeline to ensure it's in a plottable format (e.g., DimArray).","category":"page"},{"location":"explanations/tplot/#SpacePhysicsMakie.transform","page":"Space Physics Plotting","title":"SpacePhysicsMakie.transform","text":"transform(args...; kwargs...)\n\nTransform data into plottable format (e.g., DimArray).\n\nExtend with transform(x::MyType) for custom types.\n\n\n\n\n\n","category":"function"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"You can extend the transformation system by defining methods for your types:","category":"page"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"# Convert MyType to DimArray for plotting\ntransform(x::MyType) = DimArray(x.data)","category":"page"},{"location":"explanations/tplot/#Related-packages","page":"Space Physics Plotting","title":"Related packages","text":"","category":"section"},{"location":"explanations/tplot/","page":"Space Physics Plotting","title":"Space Physics Plotting","text":"PyTplot\nInteractiveViz.jl\nSciQLop : A python application built on top of Qt to explore multivariate time series effortlessly,","category":"page"},{"location":"explanations/analysis/#Analysis-Tools","page":"Analysis Tools","title":"Analysis Tools","text":"","category":"section"},{"location":"explanations/analysis/#SPEDAS.current_density-explanations-analysis","page":"Analysis Tools","title":"SPEDAS.current_density","text":"current_density(B, V)\n\nCalculate the current density time series from the magnetic field (B) and plasma velocity (V) time series.\n\nAssume 1-D structure along the z-direction. Remember to transform the coordinates of B and V first (e.g. using mva\n\n\n\n\n\n","category":"function"},{"location":"examples/tplot/#tplot-and-tplot_panel","page":"tplot and tplot_panel","title":"tplot and tplot_panel","text":"","category":"section"},{"location":"examples/tplot/","page":"tplot and tplot_panel","title":"tplot and tplot_panel","text":"The tplot system provides a unified interface for time series visualization:","category":"page"},{"location":"examples/tplot/","page":"tplot and tplot_panel","title":"tplot and tplot_panel","text":"tplot_panel: Creates single panel plots with support for multiple data types\ntplot: Combines multiple panels into a figure","category":"page"},{"location":"examples/tplot/","page":"tplot and tplot_panel","title":"tplot and tplot_panel","text":"Both functions are built on Makie's recipe system, allowing customization through plot attributes and functions.","category":"page"},{"location":"examples/tplot/","page":"tplot and tplot_panel","title":"tplot and tplot_panel","text":"using CairoMakie, SpacePhysicsMakie\nusing Unitful","category":"page"},{"location":"examples/tplot/#Flexible-and-composable-tplot_panel","page":"tplot and tplot_panel","title":"Flexible and composable tplot_panel","text":"","category":"section"},{"location":"examples/tplot/","page":"tplot and tplot_panel","title":"tplot and tplot_panel","text":"# Create sample data\nn = 24\ndata1 = rand(n) * 4u\"km/s\"  # Vector with units\ndata2 = rand(n) * 4u\"km/s\"  # Same units\ndata3 = rand(n) * 1u\"eV\"    # Different units\ndata4 = rand(n,4)           # Matrix (for heatmap)\n\nf = Figure()\n\n# Basic Plotting\ntplot_panel(f[1, 1], data1; axis=(;title=\"Single time series\"))\n\n# Multiple Series (same y-axis)\ntplot_panel(f[2, 1], [data1, data2]; axis=(;title=\"Multiple series\"), plottype=Lines)\n\n# Dual Y-Axes (different units)\ntplot_panel(f[3, 1], (data1, data3); axis=(;title=\"Dual y-axes\"))\n\n# Matrix as series\ntplot_panel(f[1, 2], data4'; axis=(;title=\"Series\"), plottype=Series)\n\n# Overlay Series on Heatmap\ntplot_panel(f[2, 2], [data4, data1, data2]; axis=(;title=\"Heatmap with overlays\"))\n\n# XY Plot (non-time series)\ntplot_panel(f[3, 2], data2, data3; axis=(;title=\"XY plot (fallback)\"))\n\nf","category":"page"},{"location":"examples/tplot/#Combining-Multiple-Panels","page":"tplot and tplot_panel","title":"Combining Multiple Panels","text":"","category":"section"},{"location":"examples/tplot/","page":"tplot and tplot_panel","title":"tplot and tplot_panel","text":"You can also combine multiple panels into a single figure using tplot. By default, it links the x-axis of each panel and layouts the panels in a single column.","category":"page"},{"location":"examples/tplot/","page":"tplot and tplot_panel","title":"tplot and tplot_panel","text":"tvars = [\n    data1,                  \n    [data1, data2],        \n    (data1, data3),\n]\ntplot(tvars)","category":"page"},{"location":"examples/tplot/","page":"tplot and tplot_panel","title":"tplot and tplot_panel","text":"tplot also supports plotting on GridPosition and GridSubposition objects","category":"page"},{"location":"examples/tplot/","page":"tplot and tplot_panel","title":"tplot and tplot_panel","text":"f=Figure()\ntvars2 = [\n    data4,\n    [data4, data1, data2],\n    (data2, data3)\n]\ntplot(f[1,1], tvars)\ntplot(f[1,2], tvars2)\nf","category":"page"},{"location":"explanations/data/#Data-Formats-and-Retrieval","page":"Data Formats and Retrieval","title":"Data Formats and Retrieval","text":"","category":"section"},{"location":"explanations/data/","page":"Data Formats and Retrieval","title":"Data Formats and Retrieval","text":"We primarily uses DimensionalData.jl for data representation and processing. This approach provides a powerful and flexible way to work with multi-dimensional data in space physics applications.","category":"page"},{"location":"explanations/data/#DimensionalData","page":"Data Formats and Retrieval","title":"DimensionalData","text":"","category":"section"},{"location":"explanations/data/","page":"Data Formats and Retrieval","title":"Data Formats and Retrieval","text":"DimensionalData.jl provides labeled dimensions for Julia arrays, making it easier to work with complex scientific data. In SPEDAS.jl, we use two main types:","category":"page"},{"location":"explanations/data/","page":"Data Formats and Retrieval","title":"Data Formats and Retrieval","text":"DimArray: A multidimensional array with named dimensions\nDimStack: A collection of DimArrays that share some or all dimensions","category":"page"},{"location":"explanations/data/","page":"Data Formats and Retrieval","title":"Data Formats and Retrieval","text":"Metadata, including units, coordinate systems, and other relevant information, are automatically preserved when loading data from CDF files or web servers. This metadata is utilized /& preserved for subsequent processing, analysis, and visualization tasks.","category":"page"},{"location":"explanations/data/","page":"Data Formats and Retrieval","title":"Data Formats and Retrieval","text":"SPEDAS uses several standard dimensions for space physics data:","category":"page"},{"location":"explanations/data/","page":"Data Formats and Retrieval","title":"Data Formats and Retrieval","text":"Ti: Time dimension\n𝑓: Frequency dimension","category":"page"},{"location":"explanations/data/#Data-Retrieval","page":"Data Formats and Retrieval","title":"Data Retrieval","text":"","category":"section"},{"location":"explanations/data/","page":"Data Formats and Retrieval","title":"Data Formats and Retrieval","text":"SPEDAS supports retrieving data from multiple sources and automatically converting it to DimensionalData format:","category":"page"},{"location":"explanations/data/","page":"Data Formats and Retrieval","title":"Data Formats and Retrieval","text":"Speasy (preferred): a Python library for accessing space physics data. Integration is provided using the wrapper library Speasy.jl.\nPySPEDAS: Python-based Space Physics Environment Data Analysis Software. Integration is provided using the wrapper library PySPEDAS.jl.\nHAPI: Heliophysics Application Programmer’s Interface (HAPI) specification. Integration is provided using the wrapper library HAPIClient.jl.","category":"page"},{"location":"explanations/data_model/#Data-Model-and-Project-Module","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"","category":"section"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"We adopt a data model inspired by the SPASE Model.","category":"page"},{"location":"explanations/data_model/#Data-Model-Overview","page":"Data Model and Project Module","title":"Data Model Overview","text":"","category":"section"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"The data model organizes data in a hierarchical type structure:","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"Project/Observatory: Represents a mission or project (e.g., MMS, THEMIS)\nContains multiple instruments\nContains multiple datasets\nInstrument: Represents a scientific instrument on a spacecraft\nAssociated with a specific project\nProduces various types of data\nLDataSet: A template for generating datasets with parameterized naming patterns\nDefines the format for dataset names\nSpecifies variables and their naming patterns\nDataSet: A concrete dataset created from an LDataSet template\nContains actual data parameters\nCreated with specific values (e.g., probe number, data rate)","category":"page"},{"location":"explanations/data_model/#SpaceDataModel.Project-explanations-data_model","page":"Data Model and Project Module","title":"SpaceDataModel.Project","text":"Project <: AbstractProject\n\nA representation of a project or mission containing instruments and datasets.\n\nFields\n\nname: The name of the project\nmetadata: Additional metadata\ninstruments: Collection of instruments\ndatasets: Collection of datasets\n\n\n\n\n\n","category":"type"},{"location":"explanations/data_model/#SpaceDataModel.Instrument-explanations-data_model","page":"Data Model and Project Module","title":"SpaceDataModel.Instrument","text":"Instrument <: AbstractInstrument\n\nFields\n\nname: The name of the instrument\nmetadata: Additional metadata\ndatasets: Collection of datasets\n\n\n\n\n\n","category":"type"},{"location":"explanations/data_model/#SpaceDataModel.LDataSet-explanations-data_model","page":"Data Model and Project Module","title":"SpaceDataModel.LDataSet","text":"LDataSet <: AbstractDataSet\n\nA template for generating datasets with parameterized naming patterns.\n\nFields\n\nformat: Format string pattern for the dataset name\ndata: Dictionary of variable patterns\nmetadata: Additional metadata\n\nExamples\n\nusing SPEDAS.MMS\n\n# Access FPI dataset specification\nlds = mms.datasets.fpi_moms\n\n# Create a concrete dataset with specific parameters\nds = DataSet(lds; probe=1, data_rate=\"fast\", data_type=\"des\")\n\nThe format string and variable patterns use placeholders like {probe}, {data_rate},  which are replaced with actual values when creating a concrete DataSet.\n\n\n\n\n\n","category":"type"},{"location":"explanations/data_model/#SpaceDataModel.DataSet-explanations-data_model","page":"Data Model and Project Module","title":"SpaceDataModel.DataSet","text":"DataSet <: AbstractDataSet\n\nA concrete dataset with a name, data (parameters), and metadata.\n\n\n\n\n\n","category":"type"},{"location":"explanations/data_model/#Project-Module-and-Configuration","page":"Data Model and Project Module","title":"Project Module and Configuration","text":"","category":"section"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"We support TOML configuration files to define project-specific metadata. A typical configuration file includes:","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"Project metadata\nInstrument definitions\nDataset template definitions","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"We use the configuration files to generate appropriate data structures in the project module. For example, the corresponding configuration file of Magnetospheric Multiscale (MMS) module src/projects/MMS/MMS.jl is config/MMS.toml.","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"note: Note\nWhile configuration files provide a convenient way to structure project metadata, you can also create these data structures directly in code. The configuration approach is optional and primarily serves to separate configuration from implementation.","category":"page"},{"location":"explanations/data_model/#Usage-Examples","page":"Data Model and Project Module","title":"Usage Examples","text":"","category":"section"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"Project-specific instruments and datasets are exported as global variables when importing a project module using SPEDAS.{project}, for example:","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"using SPEDAS\nusing SPEDAS.MMS\n\nmms","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"You can access instruments/datasets directly through the project or via exported variables:","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"@assert mms.instruments[\"feeps\"] === feeps\nfeeps","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"Dataset templates can be used to create concrete datasets by providing specific parameter values:","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"# Multiple ways to access a dataset\n@assert fpi_moms === mms.datasets[\"fpi_moms\"] === mms.instruments[\"fpi\"].datasets[\"fpi_moms\"]\nfpi_moms","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"# Create a concrete dataset with specific parameters\ndataset = DataSet(fpi_moms; probe=1, data_rate=\"fast\", data_type=\"des\")","category":"page"},{"location":"explanations/data_model/#How-Configuration-Files-Are-Used","page":"Data Model and Project Module","title":"How Configuration Files Are Used","text":"","category":"section"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"When you import a project module (e.g., using SPEDAS.MMS), the system:","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"Reads the corresponding TOML configuration file\nCreates a Project object with the defined metadata\nInstantiates Instrument objects for each instrument definition\nCreates LDataSet (dataset template) objects for each dataset definition","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"These objects are then accessible through the project namespace (e.g., mms.instruments[\"fpi\"] or mms.datasets[\"fpi_moms\"]).","category":"page"},{"location":"explanations/data_model/#Adding-a-New-Project","page":"Data Model and Project Module","title":"Adding a New Project","text":"","category":"section"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"To add support for a new space physics mission:","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"Create a new TOML file in the config/ directory (e.g., config/cluster.toml)\nDefine the project metadata, instruments, and dataset templates\nCreate a corresponding module in the src/projects/ directory (for example, MMS module is defined in src/projects/mms.jl)","category":"page"},{"location":"explanations/data_model/","page":"Data Model and Project Module","title":"Data Model and Project Module","text":"The configuration file will be automatically loaded when the project module is imported.","category":"page"},{"location":"explanations/resampling/#Time-Series-Resampling-Methods","page":"Time Series Resampling Methods","title":"Time Series Resampling Methods","text":"","category":"section"},{"location":"explanations/resampling/","page":"Time Series Resampling Methods","title":"Time Series Resampling Methods","text":"The adjustment of a segment of time-series data set to produce a segment of data which is scientifically equivalent but with data sample timing strictly simultaneous with that of another data set is called “resampling”. Paschmann and Daly [3], Chapter 2","category":"page"},{"location":"explanations/resampling/#Time-Series-Interpolation","page":"Time Series Resampling Methods","title":"Time Series Interpolation","text":"","category":"section"},{"location":"explanations/resampling/","page":"Time Series Resampling Methods","title":"Time Series Resampling Methods","text":"Flexible time series interpolation through the tinterp function.","category":"page"},{"location":"explanations/resampling/","page":"Time Series Resampling Methods","title":"Time Series Resampling Methods","text":"This function supports interpolation for both vector-like and matrix-like time series. Other features include:","category":"page"},{"location":"explanations/resampling/","page":"Time Series Resampling Methods","title":"Time Series Resampling Methods","text":"Returns scalar value for single time point interpolation\nReturns DimArray for multiple time points interpolation, preserving metadata and dimensions. \nCustomizable interpolation method through the interp keyword argument","category":"page"},{"location":"explanations/resampling/#SPEDAS.tinterp","page":"Time Series Resampling Methods","title":"SPEDAS.tinterp","text":"tinterp(A, t; interp=LinearInterpolation)\n\nInterpolate time series A at time point(s) t using interp (default: LinearInterpolation) method. Returns interpolated value for single time point or DimArray for multiple time points.\n\nSee DataInterpolations.jl for available interpolation methods.\n\nExamples\n\n# Interpolate at a single time point\ntinterp(time_series, DateTime(\"2023-01-01T12:00:00\"))\n\n# Interpolate at multiple time points using cubic spline interpolation\nnew_times = DateTime(\"2023-01-01\"):Hour(1):DateTime(\"2023-01-02\")\ntinterp(time_series, new_times; interp = CubicSpline)\n\n\n\n\n\ntinterp(A, B; interp=LinearInterpolation)\n\nInterpolate A to times in B\n\n\n\n\n\n","category":"function"},{"location":"explanations/resampling/#SPEDAS.tinterp_nans","page":"Time Series Resampling Methods","title":"SPEDAS.tinterp_nans","text":"tinterp_nans(da::AbstractDimArray; query=timeDimType, kwargs...)\n\nInterpolate only the NaN values in da along the specified dimensions query. Non-NaN values are preserved exactly as they are.\n\nSee also interpolate_nans\n\n\n\n\n\n","category":"function"},{"location":"explanations/resampling/#SPEDAS.tsync","page":"Time Series Resampling Methods","title":"SPEDAS.tsync","text":"tsync(A, Bs...)\n\nSynchronize multiple time series to have the same time points.\n\nThis function aligns the time series Bs... to match the time points of A by:\n\nFinding the common time range between all input time series\nExtracting the subset of A within this common range\nInterpolating each series in Bs... to match the time points of the subset of A\n\nReturns a tuple containing the synchronized time series, with the first element being the subset of A and subsequent elements being the interpolated versions of Bs....\n\nExamples\n\nA_sync, B_sync, C_sync = tsync(A, B, C)\n\nSee also: tinterp, common_timerange\n\n\n\n\n\n","category":"function"},{"location":"explanations/resampling/#SPEDAS.resample","page":"Time Series Resampling Methods","title":"SPEDAS.resample","text":"resample(arr, n; dim=1, verbose=false)\n\nResample an array along the dimension dim to n points. If the original length is less than or equal to n, the original array is returned unchanged.\n\n\n\n\n\n","category":"function"},{"location":"explanations/resampling/#SPEDAS.tresample","page":"Time Series Resampling Methods","title":"SPEDAS.tresample","text":"tresample(da::DimArray, n; dim = nothing, query=nothing)\n\nResample a DimArray specifically along its dimension dim or query to n points. Throws an error if no dimension of type dimtype is found in the array.\n\n\n\n\n\n","category":"function"},{"location":"validation/pyspedas/#Validation-with-PySPEDAS","page":"Validation with PySPEDAS","title":"Validation with PySPEDAS","text":"","category":"section"},{"location":"validation/pyspedas/","page":"Validation with PySPEDAS","title":"Validation with PySPEDAS","text":"note: Performance Notes\nCalling Python from Julia (via PythonCall.jl) introduces only a negligible overhead, typically within nanoseconds.\nMemory allocations shown in Julia benchmarks do not include allocations that occur within Python. To measure Python-side allocations, profiling should be done directly in Python.\nThe documentation and benchmarks are generated using a single thread on GitHub Actions. Running the code locally with multiple threads (e.g., by setting JULIA_NUM_THREADS) can yield even greater performance improvements for Julia.","category":"page"},{"location":"validation/pyspedas/","page":"Validation with PySPEDAS","title":"Validation with PySPEDAS","text":"using PySPEDAS\nusing SPEDAS\nusing PythonCall\nusing DimensionalData\nusing PySPEDAS: get_data\nusing CairoMakie, SpacePhysicsMakie\nusing Chairmarks\nusing Test","category":"page"},{"location":"validation/pyspedas/#Wave-polarization","page":"Validation with PySPEDAS","title":"Wave polarization","text":"","category":"section"},{"location":"validation/pyspedas/","page":"Validation with PySPEDAS","title":"Validation with PySPEDAS","text":"References: twavpol, test_twavpol.py - PySPEDAS, Wave polarization using SCM data - PySPEDAS","category":"page"},{"location":"validation/pyspedas/","page":"Validation with PySPEDAS","title":"Validation with PySPEDAS","text":"@py import pyspedas.analysis.tests.test_twavpol: TwavpolDataValidation\nTwavpolDataValidation.setUpClass()\n\nthc_scf_fac = get_data(DimArray, \"thc_scf_fac\")\npy_tvars = [\n    \"thc_scf_fac_powspec\",\n    \"thc_scf_fac_degpol\",\n    \"thc_scf_fac_waveangle\",\n    \"thc_scf_fac_elliptict\",\n    \"thc_scf_fac_helict\",\n]\npy_result = get_data(DimStack, py_tvars)\nres = twavpol(thc_scf_fac)\nres.power.metadata[\"scale\"] = identity\n\nf = Figure(;size=(1200, 800))\ntplot(f[1,1], py_result)\ntplot(f[1,2], res)\nf","category":"page"},{"location":"validation/pyspedas/#Benchmark","page":"Validation with PySPEDAS","title":"Benchmark","text":"","category":"section"},{"location":"validation/pyspedas/","page":"Validation with PySPEDAS","title":"Validation with PySPEDAS","text":"@b twavpol(thc_scf_fac), pyspedas.twavpol(\"thc_scf_fac\")","category":"page"},{"location":"validation/pyspedas/","page":"Validation with PySPEDAS","title":"Validation with PySPEDAS","text":"Julia is about 100 times faster than Python.","category":"page"},{"location":"validation/pyspedas/#Minimum-variance-analysis","page":"Validation with PySPEDAS","title":"Minimum variance analysis","text":"","category":"section"},{"location":"validation/pyspedas/","page":"Validation with PySPEDAS","title":"Validation with PySPEDAS","text":"References: mva_eigen, test_minvar.py - PySPEDAS","category":"page"},{"location":"validation/pyspedas/","page":"Validation with PySPEDAS","title":"Validation with PySPEDAS","text":"@py import pyspedas.cotrans_tools.tests.test_minvar: TestMinvar\n@py import pyspedas.cotrans_tools.minvar_matrix_make: minvar_matrix_make\n\nisapprox_eigenvector(v1, v2) = isapprox(v1, v2) || isapprox(v1, -v2)\n\npytest = TestMinvar()\npytest.setUpClass()\n\nthb_fgs_gsm = get_data(DimArray, \"idl_thb_fgs_gsm_mvaclipped1\")\njl_mva_eigen = mva_eigen(thb_fgs_gsm)\njl_mva_mat = jl_mva_eigen.vectors\njl_mva_vals = jl_mva_eigen.values\n\npy_mva_vals = PyArray(pytest.vals.y) |> vec\npy_mva_mat = PyArray(pytest.mat.y[0])'\n@assert isapprox(jl_mva_vals, py_mva_vals)\n@assert all(isapprox_eigenvector.(eachcol(jl_mva_mat), eachcol(py_mva_mat)))","category":"page"},{"location":"validation/pyspedas/","page":"Validation with PySPEDAS","title":"Validation with PySPEDAS","text":"Since eigenvectors are only unique up to sign; therefore, the test checks if each Julia eigenvector is approximately equal to the corresponding Python eigenvector or its negative. Test passed.","category":"page"},{"location":"validation/pyspedas/#Benchmark-2","page":"Validation with PySPEDAS","title":"Benchmark","text":"","category":"section"},{"location":"validation/pyspedas/","page":"Validation with PySPEDAS","title":"Validation with PySPEDAS","text":"@b mva_eigen(thb_fgs_gsm), minvar_matrix_make(\"idl_thb_fgs_gsm_mvaclipped1\")","category":"page"},{"location":"validation/pyspedas/","page":"Validation with PySPEDAS","title":"Validation with PySPEDAS","text":"Julia demonstrates a performance advantage of approximately 1000 times over Python, with significantly reduced memory allocations.  Moreover, Julia's implementation is generalized for N-dimensional data.","category":"page"},{"location":"observatory/mms/#Magnetospheric-Multiscale-(MMS)","page":"Magnetospheric Multiscale (MMS)","title":"Magnetospheric Multiscale (MMS)","text":"","category":"section"},{"location":"observatory/mms/#SPEDAS.MMS","page":"Magnetospheric Multiscale (MMS)","title":"SPEDAS.MMS","text":"Sub-module for \"Magnetospheric Multiscale (MMS)\"\n\nTo load project, project-specific instrument and dataset variables into scope:\n\nusing SPEDAS.MMS\n\nConfiguration File: MMS.toml\n\n\n\n\n\n","category":"module"},{"location":"observatory/mms/#SPEDAS.MMS.mms","page":"Magnetospheric Multiscale (MMS)","title":"SPEDAS.MMS.mms","text":"Project: Magnetospheric Multiscale\n  Instruments (Dict): \n    feeps: Fly's Eye Energetic Particle Sensor\n    scm: Search-coil Magnetometer\n    fgm: Fluxgate Magnetometer\n    edp: Electric Field Double Probe\n    hpca: Hot Plasma Composition Analyzer\n    eis: Energetic Ion Spectrometer\n    edi: Electron Drift Instrument\n    fpi: Fast Plasma Investigation\n  Datasets (Dict): \n    fpi_moms: \n  Metadata (Dict): \n    abbreviation: MMS\n\n\n\n\n\n","category":"constant"},{"location":"observatory/mms/#Instruments","page":"Magnetospheric Multiscale (MMS)","title":"Instruments","text":"","category":"section"},{"location":"observatory/mms/#SPEDAS.MMS.edi","page":"Magnetospheric Multiscale (MMS)","title":"SPEDAS.MMS.edi","text":"Instrument: Electron Drift Instrument\n  Metadata (NoMetadata): \n    SpaceDataModel.NoMetadata()\n\n\n\n\n\n","category":"constant"},{"location":"observatory/mms/#SPEDAS.MMS.edp","page":"Magnetospheric Multiscale (MMS)","title":"SPEDAS.MMS.edp","text":"Instrument: Electric Field Double Probe\n  Metadata (NoMetadata): \n    SpaceDataModel.NoMetadata()\n\n\n\n\n\n","category":"constant"},{"location":"observatory/mms/#SPEDAS.MMS.eis","page":"Magnetospheric Multiscale (MMS)","title":"SPEDAS.MMS.eis","text":"Instrument: Energetic Ion Spectrometer\n  Metadata (NoMetadata): \n    SpaceDataModel.NoMetadata()\n\n\n\n\n\n","category":"constant"},{"location":"observatory/mms/#SPEDAS.MMS.feeps","page":"Magnetospheric Multiscale (MMS)","title":"SPEDAS.MMS.feeps","text":"Instrument: Fly's Eye Energetic Particle Sensor\n  Metadata (NoMetadata): \n    SpaceDataModel.NoMetadata()\n\n\n\n\n\n","category":"constant"},{"location":"observatory/mms/#SPEDAS.MMS.fgm","page":"Magnetospheric Multiscale (MMS)","title":"SPEDAS.MMS.fgm","text":"Instrument: Fluxgate Magnetometer\n  Metadata (NoMetadata): \n    SpaceDataModel.NoMetadata()\n\n\n\n\n\n","category":"constant"},{"location":"observatory/mms/#SPEDAS.MMS.fpi","page":"Magnetospheric Multiscale (MMS)","title":"SPEDAS.MMS.fpi","text":"Instrument: Fast Plasma Investigation\n  Datasets (Dict): \n    fpi_moms: \n  Metadata (NoMetadata): \n    SpaceDataModel.NoMetadata()\n\n\n\n\n\n","category":"constant"},{"location":"observatory/mms/#SPEDAS.MMS.hpca","page":"Magnetospheric Multiscale (MMS)","title":"SPEDAS.MMS.hpca","text":"Instrument: Hot Plasma Composition Analyzer\n  Metadata (NoMetadata): \n    SpaceDataModel.NoMetadata()\n\n\n\n\n\n","category":"constant"},{"location":"observatory/mms/#SPEDAS.MMS.scm","page":"Magnetospheric Multiscale (MMS)","title":"SPEDAS.MMS.scm","text":"Instrument: Search-coil Magnetometer\n  Metadata (NoMetadata): \n    SpaceDataModel.NoMetadata()\n\n\n\n\n\n","category":"constant"},{"location":"observatory/mms/#Datasets","page":"Magnetospheric Multiscale (MMS)","title":"Datasets","text":"","category":"section"},{"location":"observatory/mms/#SPEDAS.MMS.fpi_moms","page":"Magnetospheric Multiscale (MMS)","title":"SPEDAS.MMS.fpi_moms","text":"LDataSet: \n  Data (Dict): \n    temppara: mms{probe}_{data_type}_temppara_{data_rate}\n    bulkv_gse: mms{probe}_{data_type}_bulkv_gse_{data_rate}\n    tempperp: mms{probe}_{data_type}_tempperp_{data_rate}\n    numberdensity: mms{probe}_{data_type}_numberdensity_{data_rate}\n    energyspectr_omni: mms{probe}_{data_type}_energyspectr_omni_{data_rate}\n  Metadata (Dict): \n    data_rates: [\"fast\", \"brst\"]\n    data_types: [\"des\", \"dis\"]\n    probes: [1, 2, 3, 4]\n\n\n\n\n\n","category":"constant"},{"location":"observatory/psp/#Parker-Solar-Probe-(PSP)","page":"Parker Solar Probe (PSP)","title":"Parker Solar Probe (PSP)","text":"","category":"section"},{"location":"observatory/psp/#SPEDAS.PSP","page":"Parker Solar Probe (PSP)","title":"SPEDAS.PSP","text":"Sub-module for \"Parker Solar Probe (PSP)\"\n\nTo load project, project-specific instrument and dataset variables into scope:\n\nusing SPEDAS.PSP\n\nConfiguration File: PSP.toml\n\n\n\n\n\n","category":"module"},{"location":"observatory/psp/#SPEDAS.PSP.psp","page":"Parker Solar Probe (PSP)","title":"SPEDAS.PSP.psp","text":"Project: Parker Solar Probe\n  Instruments (Dict): \n    isois: Integrated Science Investigation of the Sun\n    fields: FIELDS\n    wispr: Wide-field Imager for Solar Probe\n    eis: Ephemeris\n    sweap: Solar Wind Electrons Alphas and Protons\n  Metadata (Dict): \n    abbreviation: PSP\n    links: [\"https://hpde.io/SMWG/Observatory/ParkerSolarProbe.html\", \"[Wikipedia](https://en.wikipedia.org/wiki/Parker_Solar_Probe)\"]\n    spase_id: spase://SMWG/Observatory/ParkerSolarProbe\n\n\n\n\n\n","category":"constant"},{"location":"observatory/psp/#Instruments","page":"Parker Solar Probe (PSP)","title":"Instruments","text":"","category":"section"},{"location":"observatory/psp/#SPEDAS.PSP.eis","page":"Parker Solar Probe (PSP)","title":"SPEDAS.PSP.eis","text":"Instrument: Ephemeris\n  Metadata (NoMetadata): \n    SpaceDataModel.NoMetadata()\n\n\n\n\n\n","category":"constant"},{"location":"observatory/psp/#SPEDAS.PSP.fields","page":"Parker Solar Probe (PSP)","title":"SPEDAS.PSP.fields","text":"Instrument: FIELDS\n  Metadata (Dict): \n    spase_id: spase://SMWG/Instrument/ParkerSolarProbe/FIELDS\n\n\n\n\n\n","category":"constant"},{"location":"observatory/psp/#SPEDAS.PSP.isois","page":"Parker Solar Probe (PSP)","title":"SPEDAS.PSP.isois","text":"Instrument: Integrated Science Investigation of the Sun\n  Metadata (NoMetadata): \n    SpaceDataModel.NoMetadata()\n\n\n\n\n\n","category":"constant"},{"location":"observatory/psp/#SPEDAS.PSP.sweap","page":"Parker Solar Probe (PSP)","title":"SPEDAS.PSP.sweap","text":"Instrument: Solar Wind Electrons Alphas and Protons\n  Metadata (NoMetadata): \n    SpaceDataModel.NoMetadata()\n\n\n\n\n\n","category":"constant"},{"location":"observatory/psp/#SPEDAS.PSP.wispr","page":"Parker Solar Probe (PSP)","title":"SPEDAS.PSP.wispr","text":"Instrument: Wide-field Imager for Solar Probe\n  Metadata (NoMetadata): \n    SpaceDataModel.NoMetadata()\n\n\n\n\n\n","category":"constant"},{"location":"observatory/psp/#Datasets","page":"Parker Solar Probe (PSP)","title":"Datasets","text":"","category":"section"},{"location":"observatory/psp/#Examples","page":"Parker Solar Probe (PSP)","title":"Examples","text":"","category":"section"},{"location":"observatory/psp/","page":"Parker Solar Probe (PSP)","title":"Parker Solar Probe (PSP)","text":"using Speasy: SpeasyProduct\nusing SPEDAS\nusing CairoMakie, SpacePhysicsMakie\nusing Unitful\n\nn = DataSet(\"Density\",\n    [\n        SpeasyProduct(\"PSP_SWP_SPI_SF00_L3_MOM/DENS\"; labels=[\"SPI Proton\"]),\n        SpeasyProduct(\"PSP_SWP_SPC_L3I/np_moment\"; labels=[\"SPC Proton\"]),\n        SpeasyProduct(\"PSP_FLD_L3_RFS_LFR_QTN/N_elec\"; labels=[\"RFS Electron\"]),\n        SpeasyProduct(\"PSP_FLD_L3_SQTN_RFS_V1V2/electron_density\"; labels=[\"SQTN Electron\"])\n    ]\n)","category":"page"},{"location":"observatory/psp/","page":"Parker Solar Probe (PSP)","title":"Parker Solar Probe (PSP)","text":"tplot(n, \"2021-08-09T06\", \"2021-08-10T18\")","category":"page"},{"location":"observatory/psp/","page":"Parker Solar Probe (PSP)","title":"Parker Solar Probe (PSP)","text":"# Overlay multiple datasets in the same panel\ntplot([n], \"2021-08-09T06\", \"2021-08-10T18\")","category":"page"},{"location":"observatory/psp/#References","page":"Parker Solar Probe (PSP)","title":"References","text":"","category":"section"},{"location":"observatory/psp/","page":"Parker Solar Probe (PSP)","title":"Parker Solar Probe (PSP)","text":"Wikipedia","category":"page"},{"location":"validation/coords/#Compare-Coordinate-Transformations-with-IRBEM-and-PySPEDAS","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"","category":"section"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"See Coordinate Systems for more information.","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"note: Takeaway\nJulia's implementation yields results very close to IRBEM's and PySPEDAS's one, and is an order of magnitude faster. (Julia's one uses finer interpolation than IRBEM's and PySPEDAS's one to determine IGRF coefficients and sun's direction, leading to more accurate transformations.)","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"References: cotrans, test_cotrans.py - PySPEDAS","category":"page"},{"location":"validation/coords/#Setup","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Setup","text":"","category":"section"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"using PySPEDAS\nusing SPEDAS\nusing SPEDAS: irbem_cotrans\nusing PythonCall\nusing DimensionalData\nusing Chairmarks\nusing Test","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"Setup using PySPEDAS test cases.","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"@py import pyspedas.cotrans_tools.tests.cotrans: CotransTestCases\n\npytest = CotransTestCases()\npytest.test_cotrans()\n\ntrange = [\"2010-02-25/00:00:00\", \"2010-02-25/23:59:59\"]\npyspedas.projects.themis.state(trange, probe=\"a\", time_clip=true)\n\ntha_pos = PySPEDAS.get_data(DimArray, \"tha_pos\")\ntha_pos_gse = PySPEDAS.get_data(DimArray, \"tha_pos_gse\")\njl_tha_pos = set(tha_pos, Dim{:time}=>Ti)\njl_tha_pos_gse = set(tha_pos_gse, Dim{:time}=>Ti)","category":"page"},{"location":"validation/coords/#Validation","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Validation","text":"","category":"section"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"Transform coordinates using Julia native implementation, IRBEM, and PySPEDAS.","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"GEI <-> GEO","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"jl_tha_pos_geo = gei2geo(jl_tha_pos)\nir_tha_pos_geo = irbem_cotrans(jl_tha_pos', \"GEI\", \"GEO\")'\npy_tha_pos_geo = PySPEDAS.get_data(DimArray, \"tha_pos_new_geo\")\n\n@test jl_tha_pos_geo ≈ parent(py_tha_pos_geo)\n@test jl_tha_pos_geo ≈ ir_tha_pos_geo","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"GEI <-> GSM","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"jl_tha_pos_gsm = gei2gsm(jl_tha_pos)\nir_tha_pos_gsm = irbem_cotrans(jl_tha_pos', \"GEI\", \"GSM\")'\npyspedas.cotrans(\"tha_pos\", \"tha_pos_new_gsm\", coord_in=\"GEI\", coord_out=\"GSM\")\npy_tha_pos_gsm = PySPEDAS.get_data(DimArray, \"tha_pos_new_gsm\")\n\n@test isapprox(jl_tha_pos_gsm, parent(py_tha_pos_gsm), rtol=1e-5)\n@test isapprox(jl_tha_pos_gsm, ir_tha_pos_gsm, rtol=1e-3)","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"GSE <-> GSM","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"jl_tha_pos_gsm = gse2gsm(jl_tha_pos_gse)\nir_tha_pos_gsm = irbem_cotrans(jl_tha_pos_gse', \"GSE\", \"GSM\")'\npyspedas.cotrans(\"tha_pos_gse\", \"tha_pos_new_gsm\", coord_in=\"GSE\", coord_out=\"GSM\")\npy_tha_pos_gsm = PySPEDAS.get_data(DimArray, \"tha_pos_new_gsm\")\n\n@test isapprox(jl_tha_pos_gsm, parent(py_tha_pos_gsm), rtol=1e-5)\n@test isapprox(jl_tha_pos_gsm, ir_tha_pos_gsm, rtol=1e-3)","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"Validate results: GEI/GEO transformations is quite accurate, while there are some differences in GSE/GSM transformations between Julia native implementation and IRBEM's one.","category":"page"},{"location":"validation/coords/#Benchmark","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Benchmark","text":"","category":"section"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"Depends on the transformation, Julia's implementation is about 10-40 times faster than IRBEM's (Fortran) implementation, and 20-50 times faster than PySPEDAS's (Python) implementation.","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"@b gei2geo($jl_tha_pos), irbem_cotrans($jl_tha_pos', \"GEI\", \"GEO\"), pyspedas.cotrans(\"tha_pos\", \"tha_pos_new_geo\", coord_in=\"GEI\", coord_out=\"GEO\")","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"@b gei2gsm($jl_tha_pos), irbem_cotrans($jl_tha_pos', \"GEI\", \"GSM\"), pyspedas.cotrans(\"tha_pos\", \"tha_pos_new_gsm\", coord_in=\"GEI\", coord_out=\"GSM\")","category":"page"},{"location":"validation/coords/","page":"Compare Coordinate Transformations with IRBEM and PySPEDAS","title":"Compare Coordinate Transformations with IRBEM and PySPEDAS","text":"@b gse2gsm($jl_tha_pos_gse), irbem_cotrans($jl_tha_pos_gse', \"GSE\", \"GSM\"), pyspedas.cotrans(\"tha_pos_gse\", \"tha_pos_new_gsm\", coord_in=\"GSE\", coord_out=\"GSM\")","category":"page"},{"location":"#SPEDAS.jl","page":"Home","title":"SPEDAS.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: ) (Image: DOI)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: SciML Code Style) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A collection of tools for space physics / heliophysics: from data loading and processing to plotting and analysis.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"SPEDAS\")","category":"page"},{"location":"#Related-packages","page":"Home","title":"Related packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SPEDAS (IDL) / PySPEDAS : Space Physics Environment Data Analysis Software framework to support loading, plotting, analysis, and integration of data from a number of space- and ground-based observatories\nSpacePy : A package for Python, targeted at the space sciences, that aims to make basic data analysis, modeling and visualization easier.\nKamodo : An official NASA open-source python package built upon the functionalization of datasets\nautoplot : An interactive browser for data on the web\ndas2: Web-based data delivery, visualization, and analysis system from the The University of Iowa.\nspace-analysis.py : Python utils for data analysis in space physics.\nSpaceAnalysis.jl : Space physics analysis tool using Julia\nminimum variance analysis (MVA)\nspectral analysis\nmoving box average for filtering magnetometer data\ncoordinate transformations\nirfu-matlab: Matlab routines to work with space data, particularly with MMS and Cluster/CAA data. Also some general plasma routines.\nQSAS (C/C++) : Science Analysis Software for Space Plasmas\npysat: Python Satellite Data Analysis Toolkit","category":"page"},{"location":"","page":"Home","title":"Home","text":"⚠️ Development Status: This package is in active development. While functional, the API may undergo changes in future releases. Please review the documentation and test thoroughly before using in scientific work.","category":"page"},{"location":"","page":"Home","title":"Home","text":"📫 Contributing: We welcome contributions! If you're interested in collaborating or need assistance, please open an issue or reach out through our GitHub repository.","category":"page"},{"location":"#Explanations","page":"Home","title":"Explanations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"explanations/coords.md\",\n    \"explanations/multispacecraft.md\",\n    \"explanations/tplot.md\",\n    \"explanations/resampling.md\"\n]\nDepth = 1","category":"page"},{"location":"#Reproducibility","page":"Home","title":"Reproducibility","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<details><summary>The documentation of this package was built using these direct dependencies,</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using InteractiveUtils # hide\nversioninfo() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"explanations/coords/#Coordinate-Systems-and-Transformations","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"","category":"section"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"This package defines common coordinate systems used in heliophysics and space physics research.","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"Pages = [\"coords.md\"]\nDepth = 2:3","category":"page"},{"location":"explanations/coords/#Standard-Coordinate-Systems","page":"Coordinate Systems and Transformations","title":"Standard Coordinate Systems","text":"","category":"section"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"Systems based on the Earth-Sun line","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"GSE (Geocentric Solar Ecliptic)\nGSM (Geocentric Solar Magnetic)","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"Systems based on the Earth's rotation axis","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"GEO (Geographic)\nGEI (Geocentric Equatorial Inertial)\nJ2000","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"Systems based on the dipole axis of the Earth's magnetic field","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"SM (Solar Magnetic)\nMAG (Geomagnetic)","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"Other coordinate systems","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"Altitude Adjusted Corrected Geogmagnetic Coordinates (AACGM)","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"More information can be found in the the following links","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"https://stereo-ssc.nascom.nasa.gov/coordinates_explanation.shtml\nGeocentric systems","category":"page"},{"location":"explanations/coords/#Coordinate-Transformations","page":"Coordinate Systems and Transformations","title":"Coordinate Transformations","text":"","category":"section"},{"location":"explanations/coords/#SPEDAS.rotate-explanations-coords","page":"Coordinate Systems and Transformations","title":"SPEDAS.rotate","text":"rotate(ts::AbstractMatrix, mat::AbstractMatrix)\n\nCoordinate-aware transformation of vector/matrix by rotation matrix(s) mat(s). Assume ts is a matrix of shape (n, 3).\n\n\n\n\n\n","category":"function"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"A comprehensive description of the transformations can be found in Hapgood [1]","category":"page"},{"location":"explanations/coords/#Coordinate-transformations-between-geocentric-systems","page":"Coordinate Systems and Transformations","title":"Coordinate transformations between geocentric systems","text":"","category":"section"},{"location":"explanations/coords/#SPEDAS.cotrans-explanations-coords","page":"Coordinate Systems and Transformations","title":"SPEDAS.cotrans","text":"cotrans(A, in, out)\ncotrans(A, out; in=get_coord(A))\n\nTransform the data to the out coordinate system from the in coordinate system.\n\nThis function automatically choose between Julia's GeoCotrans (if available) and Fortran's IRBEM implementation.\n\nReferences:\n\nIRBEM-LIB: compute magnetic coordinates and perform coordinate conversions (Documentation, IRBEM.jl)\nSPEDAS Cotrans\n\n\n\n\n\n","category":"function"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"using DimensionalData\nusing Speasy, SPEDAS\nusing CairoMakie, SpacePhysicsMakie\n\npos_gse = get_data(\"cda/THC_L1_STATE/thc_pos_gse\", \"2015-10-16\", \"2015-10-17\") |> DimArray\n\npos_gsm = cotrans(pos_gse, \"GSM\")\npos_sm = cotrans(pos_gse, \"SM\")\npos_geo = cotrans(pos_gse, \"GEO\")\n\ntplot((pos_gse, pos_gsm, pos_sm, pos_geo))","category":"page"},{"location":"explanations/coords/#Specialized-Coordinate-Systems","page":"Coordinate Systems and Transformations","title":"Specialized Coordinate Systems","text":"","category":"section"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"The package also provides transformations for analysis-specific coordinate systems:","category":"page"},{"location":"explanations/coords/#Field-Aligned-Coordinates-(FAC)","page":"Coordinate Systems and Transformations","title":"Field-Aligned Coordinates (FAC)","text":"","category":"section"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"A local coordinate system defined relative to the ambient magnetic field direction, useful for studying plasma waves and particle distributions.","category":"page"},{"location":"explanations/coords/#SPEDAS.fac_mat-explanations-coords","page":"Coordinate Systems and Transformations","title":"SPEDAS.fac_mat","text":"fac_mat(vec::AbstractVector; xref=[1.0, 0.0, 0.0])\n\nGenerates a field-aligned coordinate (FAC) transformation matrix for a vector.\n\nArguments\n\nvec: A 3-element vector representing the magnetic field\n\n\n\n\n\n","category":"function"},{"location":"explanations/coords/#Minimum-Variance-Analysis-(MVA)-and-Boundary-Normal-Coordinates-(LMN)","page":"Coordinate Systems and Transformations","title":"Minimum Variance Analysis (MVA) and Boundary Normal Coordinates (LMN)","text":"","category":"section"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"A coordinate system derived from the eigenvalues and eigenvectors of the magnetic field variance matrix, commonly used in analyzing current sheets, discontinuities, and wave propagation.","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"References:","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"Minimum and Maximum Variance Analysis\nhttps://pyspedas.readthedocs.io/en/latest/coords.html#pyspedas.minvar","category":"page"},{"location":"explanations/coords/#SPEDAS.mva_eigen-explanations-coords","page":"Coordinate Systems and Transformations","title":"SPEDAS.mva_eigen","text":"mva_eigen(B::AbstractMatrix; dim = nothing, sort=(;), check=false) -> F::Eigen\n\nPerform minimum variance analysis for B (which varies along the dim dimension).\n\nReturn Eigen factorization object F which contains the eigenvalues in F.values and the eigenvectors in the columns of the matrix F.vectors.\n\nSet check=true to check the reliability of the result.\n\nThe kth eigenvector can be obtained from the slice F.vectors[:, k].\n\n\n\n\n\n","category":"function"},{"location":"explanations/coords/#SPEDAS.mva-explanations-coords","page":"Coordinate Systems and Transformations","title":"SPEDAS.mva","text":"mva(V, B=V; kwargs...)\n\nRotate a timeseries V into the LMN coordinates based on the reference field B.\n\nArguments\n\nV: The timeseries data to be transformed, where each column represents a component\nB: The reference field used to determine the minimum variance directions, where each column represents a component\n\nSee also: mva_eigen, rotate\n\n\n\n\n\n","category":"function"},{"location":"explanations/coords/#SPEDAS.check_mva_eigen-explanations-coords","page":"Coordinate Systems and Transformations","title":"SPEDAS.check_mva_eigen","text":"check_mva_eigen(F; r=5, verbose=false)\n\nCheck the quality of the MVA result.\n\nIf λ₁ ≥ λ₂ ≥ λ₃ are 3 eigenvalues of the constructed matrix M, then a good indicator of nice fitting LMN coordinate system should have abs(λ₂  λ₃)  r.\n\n\n\n\n\n","category":"function"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"Error estimates for MVA:","category":"page"},{"location":"explanations/coords/#SPEDAS.Δφij-explanations-coords","page":"Coordinate Systems and Transformations","title":"SPEDAS.Δφij","text":"Δφij(λᵢ, λⱼ, λ₃, M)\n\nCalculate the phase error between components i and j according to: |Δφᵢⱼ| = |Δφⱼᵢ| = √(λ₃/(M-1) * (λᵢ + λⱼ - λ₃)/(λᵢ - λⱼ)²)\n\nParameters:\n\nλᵢ: eigenvalue i\nλⱼ: eigenvalue j\nλ₃: smallest eigenvalue (λ₃)\nM: number of samples\n\n\n\n\n\n","category":"function"},{"location":"explanations/coords/#SPEDAS.B_x3_error-explanations-coords","page":"Coordinate Systems and Transformations","title":"SPEDAS.B_x3_error","text":"Calculate the composite statistical error estimate for ⟨B·x₃⟩: |Δ⟨B·x₃⟩| = √(λ₃/(M-1) + (Δφ₃₂⟨B⟩·x₂)² + (Δφ₃₁⟨B⟩·x₁)²)\n\nParameters:\n\nλ₁, λ₂, λ₃: eigenvalues in descending order\nM: number of samples\nB: mean magnetic field vector\nx₁, x₂, x₃: eigenvectors\n\n\n\n\n\n","category":"function"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"See also: Comparison with PySPEDAS.","category":"page"},{"location":"explanations/coords/#Reference","page":"Coordinate Systems and Transformations","title":"Reference","text":"","category":"section"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"The International Radiation Belt Environment Modeling (IRBEM) library","category":"page"},{"location":"explanations/coords/","page":"Coordinate Systems and Transformations","title":"Coordinate Systems and Transformations","text":"PySPEDAS: Coordinate Systems\ngeopack: Python version of geopack and Tsyganenko models\ngeospacelab: A python-based library to collect, manage, and visualize geospace data (e.g. OMNI, geomagnetic indices, EISCAT, DMSP, SWARM, TEC, AMPERE, etc.).\naacgmv2: Python library for AACGM-v2 magnetic coordinates","category":"page"}]
}
